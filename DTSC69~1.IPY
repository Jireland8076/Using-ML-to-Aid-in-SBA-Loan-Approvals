{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5c276ac0",
   "metadata": {},
   "source": [
    "# Using ML to Aid in SBA Loan Approvals \n",
    "# By Joshua Ireland"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d2b69b6",
   "metadata": {},
   "source": [
    "# Objective"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9bf6b35c",
   "metadata": {},
   "source": [
    "The goal of this project will be to create a machine learning model that will aid a banker in deciding if a business owner should or should not be approved for a Small Business Administration (SBA) loan based on the likelihood the loan will go into default."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "725a3e48",
   "metadata": {},
   "source": [
    "# Background"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23cc65ea",
   "metadata": {},
   "source": [
    "Small Business Administration Backed Loans, or SBA loans for short, is a lending product designed to help small business owners fund, expand, or continue the operations of their businesses (1).  This program allows the federal government to guarantee a loan for the bank to offer to a small business owner.  This is an important, win-win-win, program.  It allows the federal government to directly invest into new businesses and the growth they bring. This program builds the bank’s confidence to lend to a group that would normally be too risky to lend to thus securing itself a whole new client base.  Finally, this allows the average business owner, who doesn’t have a rich family or investor friends, to secure the financing they need to make their dreams come to fruition.\n",
    "\n",
    "The use of a model like this could be twofold.  For the banker to have a model to use to quickly estimate if a business owner is likely to pay on their loan and not go into default.  I think this model could also be helpful in the hands of the business owner.  Preparing to secure an SBA loan can be intimidating.  The business owner needs to assemble a business plan, current financials, projected financials and other items to persuade the banker that you would grow your business and be able to pay it back faithfully (2).  This model could then be used to help test if the business owner has a compelling case before meeting with the banker to secure the SBA loan.\n",
    "\n",
    "I have a secondary objective from this model creation.  Coming from a background of franchise consulting and seeing how SBA loans can be critical to securing a franchise I am interested in seeing what could help my clients prepare. In the process I am also hoping to learn how investing in a franchise versus starting a new business could lead to a better or worse approval rating for SBA loans.\n",
    "\n",
    "My hypothesis is that securing an SBA loan to fund the purchase of a franchise will have a positive correlation with SBA loan approval. The U.S. Small Business Administration website even explains some of the advantages of buying a franchise or existing business over the creation of a new one, as well as some of its shortcomings (3).  Likewise, I think the SBA loan officer in the local bank would be aware of the differences and see the advantage in lending to a franchisee over someone starting from scratch.\n",
    "\n",
    "My goal is to gather data from the small business association database that I found in an article for the Journal of Statistics Education entitled ”’Should This Loan be Approved or Denied?’: A Large Dataset with Class Assignment Guidelines” (4).  After that I plan to review the data thoroughly, clean, and prepare it for use in training a machine learning model. After the model is created I will create an interface for bankers approving SBA loans, and those interested in applying for them, can use it to make more educated decisions of which loans to approve and which to deny.\n",
    "\n",
    "1. Loans. (n.d.). Retrieved from U.S. Small Business Administration: https://www.sba.gov/funding-programs/loans\n",
    "2. Fund Your Business. (n.d.). Retrieved from U.S. Small Business Administration: https://www.sba.gov/business-guide/plan-your-business/fund-your-business\n",
    "3. Buy an existing business or franchise. (n.d.). Retrieved from U.S. Small Business Administration: https://www.sba.gov/business-guide/plan-your-business/buy-existing-business-or-franchise\n",
    "4.  Min Li, Amy Mickel & Stanley Taylor (2018) “Should This Loan be Approved or Denied?”: A Large Dataset with Class Assignment Guidelines, Journal of Statistics Education, 26:1, 55-66, DOI: 10.1080/10691898.2018.1434342\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a88ae99",
   "metadata": {},
   "source": [
    "# Data Description"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74c0b82c",
   "metadata": {},
   "source": [
    "The data was taken from Min Li, Amy Mickel & Stanley Taylor (2018) “Should This Loan be Approved or Denied?”: A Large Dataset with Class Assignment Guidelines, Journal of Statistics Education, 26:1, 55-66, DOI: 10.1080/10691898.2018.1434342. \n",
    "\n",
    "This data was collected from the SBA from the years 1987 to 2014.\n",
    "\n",
    "Below is a table describing the different variables that I took from the article above:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0ee08ac3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<PIL.PngImagePlugin.PngImageFile image mode=RGBA size=536x555 at 0x23C0DD671C0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Code taken from this source: https://www.delftstack.com/howto/python/python-display-image/\n",
    "import IPython.display as display\n",
    "from PIL import Image\n",
    "display.display(Image.open('DataSBADescriptions.png'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a41b0adb",
   "metadata": {},
   "source": [
    "# Common Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "aaaba9f2",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Intel(R) Extension for Scikit-learn* enabled (https://github.com/intel/scikit-learn-intelex)\n"
     ]
    }
   ],
   "source": [
    "#Importing Intel Sklearn patch\n",
    "from sklearnex import patch_sklearn\n",
    "patch_sklearn()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b7d77206",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Common Imports\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib as mpl\n",
    "from matplotlib import cm\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import time\n",
    "%matplotlib inline\n",
    "import os\n",
    "from datetime import datetime\n",
    "from sklearn import svm\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.impute import KNNImputer\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import precision_score\n",
    "from sklearn.metrics import recall_score\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.metrics import plot_confusion_matrix\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.svm import SVC\n",
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from functools import reduce\n",
    "import pickle"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47476589",
   "metadata": {},
   "source": [
    "# Load Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "18f31709",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LoanNr_ChkDgt</th>\n",
       "      <th>Name</th>\n",
       "      <th>City</th>\n",
       "      <th>State</th>\n",
       "      <th>Zip</th>\n",
       "      <th>Bank</th>\n",
       "      <th>BankState</th>\n",
       "      <th>NAICS</th>\n",
       "      <th>ApprovalDate</th>\n",
       "      <th>ApprovalFY</th>\n",
       "      <th>...</th>\n",
       "      <th>RevLineCr</th>\n",
       "      <th>LowDoc</th>\n",
       "      <th>ChgOffDate</th>\n",
       "      <th>DisbursementDate</th>\n",
       "      <th>DisbursementGross</th>\n",
       "      <th>BalanceGross</th>\n",
       "      <th>MIS_Status</th>\n",
       "      <th>ChgOffPrinGr</th>\n",
       "      <th>GrAppv</th>\n",
       "      <th>SBA_Appv</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000014003</td>\n",
       "      <td>ABC HOBBYCRAFT</td>\n",
       "      <td>EVANSVILLE</td>\n",
       "      <td>IN</td>\n",
       "      <td>47711</td>\n",
       "      <td>FIFTH THIRD BANK</td>\n",
       "      <td>OH</td>\n",
       "      <td>451120</td>\n",
       "      <td>28-Feb-97</td>\n",
       "      <td>1997</td>\n",
       "      <td>...</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>NaN</td>\n",
       "      <td>28-Feb-99</td>\n",
       "      <td>$60,000.00</td>\n",
       "      <td>$0.00</td>\n",
       "      <td>P I F</td>\n",
       "      <td>$0.00</td>\n",
       "      <td>$60,000.00</td>\n",
       "      <td>$48,000.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000024006</td>\n",
       "      <td>LANDMARK BAR &amp; GRILLE (THE)</td>\n",
       "      <td>NEW PARIS</td>\n",
       "      <td>IN</td>\n",
       "      <td>46526</td>\n",
       "      <td>1ST SOURCE BANK</td>\n",
       "      <td>IN</td>\n",
       "      <td>722410</td>\n",
       "      <td>28-Feb-97</td>\n",
       "      <td>1997</td>\n",
       "      <td>...</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31-May-97</td>\n",
       "      <td>$40,000.00</td>\n",
       "      <td>$0.00</td>\n",
       "      <td>P I F</td>\n",
       "      <td>$0.00</td>\n",
       "      <td>$40,000.00</td>\n",
       "      <td>$32,000.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000034009</td>\n",
       "      <td>WHITLOCK DDS, TODD M.</td>\n",
       "      <td>BLOOMINGTON</td>\n",
       "      <td>IN</td>\n",
       "      <td>47401</td>\n",
       "      <td>GRANT COUNTY STATE BANK</td>\n",
       "      <td>IN</td>\n",
       "      <td>621210</td>\n",
       "      <td>28-Feb-97</td>\n",
       "      <td>1997</td>\n",
       "      <td>...</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31-Dec-97</td>\n",
       "      <td>$287,000.00</td>\n",
       "      <td>$0.00</td>\n",
       "      <td>P I F</td>\n",
       "      <td>$0.00</td>\n",
       "      <td>$287,000.00</td>\n",
       "      <td>$215,250.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000044001</td>\n",
       "      <td>BIG BUCKS PAWN &amp; JEWELRY, LLC</td>\n",
       "      <td>BROKEN ARROW</td>\n",
       "      <td>OK</td>\n",
       "      <td>74012</td>\n",
       "      <td>1ST NATL BK &amp; TR CO OF BROKEN</td>\n",
       "      <td>OK</td>\n",
       "      <td>0</td>\n",
       "      <td>28-Feb-97</td>\n",
       "      <td>1997</td>\n",
       "      <td>...</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30-Jun-97</td>\n",
       "      <td>$35,000.00</td>\n",
       "      <td>$0.00</td>\n",
       "      <td>P I F</td>\n",
       "      <td>$0.00</td>\n",
       "      <td>$35,000.00</td>\n",
       "      <td>$28,000.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000054004</td>\n",
       "      <td>ANASTASIA CONFECTIONS, INC.</td>\n",
       "      <td>ORLANDO</td>\n",
       "      <td>FL</td>\n",
       "      <td>32801</td>\n",
       "      <td>FLORIDA BUS. DEVEL CORP</td>\n",
       "      <td>FL</td>\n",
       "      <td>0</td>\n",
       "      <td>28-Feb-97</td>\n",
       "      <td>1997</td>\n",
       "      <td>...</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14-May-97</td>\n",
       "      <td>$229,000.00</td>\n",
       "      <td>$0.00</td>\n",
       "      <td>P I F</td>\n",
       "      <td>$0.00</td>\n",
       "      <td>$229,000.00</td>\n",
       "      <td>$229,000.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899159</th>\n",
       "      <td>9995573004</td>\n",
       "      <td>FABRIC FARMS</td>\n",
       "      <td>UPPER ARLINGTON</td>\n",
       "      <td>OH</td>\n",
       "      <td>43221</td>\n",
       "      <td>JPMORGAN CHASE BANK NATL ASSOC</td>\n",
       "      <td>IL</td>\n",
       "      <td>451120</td>\n",
       "      <td>27-Feb-97</td>\n",
       "      <td>1997</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30-Sep-97</td>\n",
       "      <td>$70,000.00</td>\n",
       "      <td>$0.00</td>\n",
       "      <td>P I F</td>\n",
       "      <td>$0.00</td>\n",
       "      <td>$70,000.00</td>\n",
       "      <td>$56,000.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899160</th>\n",
       "      <td>9995603000</td>\n",
       "      <td>FABRIC FARMS</td>\n",
       "      <td>COLUMBUS</td>\n",
       "      <td>OH</td>\n",
       "      <td>43221</td>\n",
       "      <td>JPMORGAN CHASE BANK NATL ASSOC</td>\n",
       "      <td>IL</td>\n",
       "      <td>451130</td>\n",
       "      <td>27-Feb-97</td>\n",
       "      <td>1997</td>\n",
       "      <td>...</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31-Oct-97</td>\n",
       "      <td>$85,000.00</td>\n",
       "      <td>$0.00</td>\n",
       "      <td>P I F</td>\n",
       "      <td>$0.00</td>\n",
       "      <td>$85,000.00</td>\n",
       "      <td>$42,500.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899161</th>\n",
       "      <td>9995613003</td>\n",
       "      <td>RADCO MANUFACTURING CO.,INC.</td>\n",
       "      <td>SANTA MARIA</td>\n",
       "      <td>CA</td>\n",
       "      <td>93455</td>\n",
       "      <td>RABOBANK, NATIONAL ASSOCIATION</td>\n",
       "      <td>CA</td>\n",
       "      <td>332321</td>\n",
       "      <td>27-Feb-97</td>\n",
       "      <td>1997</td>\n",
       "      <td>...</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30-Sep-97</td>\n",
       "      <td>$300,000.00</td>\n",
       "      <td>$0.00</td>\n",
       "      <td>P I F</td>\n",
       "      <td>$0.00</td>\n",
       "      <td>$300,000.00</td>\n",
       "      <td>$225,000.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899162</th>\n",
       "      <td>9995973006</td>\n",
       "      <td>MARUTAMA HAWAII, INC.</td>\n",
       "      <td>HONOLULU</td>\n",
       "      <td>HI</td>\n",
       "      <td>96830</td>\n",
       "      <td>BANK OF HAWAII</td>\n",
       "      <td>HI</td>\n",
       "      <td>0</td>\n",
       "      <td>27-Feb-97</td>\n",
       "      <td>1997</td>\n",
       "      <td>...</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>8-Mar-00</td>\n",
       "      <td>31-Mar-97</td>\n",
       "      <td>$75,000.00</td>\n",
       "      <td>$0.00</td>\n",
       "      <td>CHGOFF</td>\n",
       "      <td>$46,383.00</td>\n",
       "      <td>$75,000.00</td>\n",
       "      <td>$60,000.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899163</th>\n",
       "      <td>9996003010</td>\n",
       "      <td>PACIFIC TRADEWINDS FAN &amp; LIGHT</td>\n",
       "      <td>KAILUA</td>\n",
       "      <td>HI</td>\n",
       "      <td>96734</td>\n",
       "      <td>CENTRAL PACIFIC BANK</td>\n",
       "      <td>HI</td>\n",
       "      <td>0</td>\n",
       "      <td>27-Feb-97</td>\n",
       "      <td>1997</td>\n",
       "      <td>...</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31-May-97</td>\n",
       "      <td>$30,000.00</td>\n",
       "      <td>$0.00</td>\n",
       "      <td>P I F</td>\n",
       "      <td>$0.00</td>\n",
       "      <td>$30,000.00</td>\n",
       "      <td>$24,000.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>899164 rows × 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        LoanNr_ChkDgt                            Name             City State  \\\n",
       "0          1000014003                  ABC HOBBYCRAFT       EVANSVILLE    IN   \n",
       "1          1000024006     LANDMARK BAR & GRILLE (THE)        NEW PARIS    IN   \n",
       "2          1000034009           WHITLOCK DDS, TODD M.      BLOOMINGTON    IN   \n",
       "3          1000044001   BIG BUCKS PAWN & JEWELRY, LLC     BROKEN ARROW    OK   \n",
       "4          1000054004     ANASTASIA CONFECTIONS, INC.          ORLANDO    FL   \n",
       "...               ...                             ...              ...   ...   \n",
       "899159     9995573004                    FABRIC FARMS  UPPER ARLINGTON    OH   \n",
       "899160     9995603000                    FABRIC FARMS         COLUMBUS    OH   \n",
       "899161     9995613003    RADCO MANUFACTURING CO.,INC.      SANTA MARIA    CA   \n",
       "899162     9995973006           MARUTAMA HAWAII, INC.         HONOLULU    HI   \n",
       "899163     9996003010  PACIFIC TRADEWINDS FAN & LIGHT           KAILUA    HI   \n",
       "\n",
       "          Zip                            Bank BankState   NAICS ApprovalDate  \\\n",
       "0       47711                FIFTH THIRD BANK        OH  451120    28-Feb-97   \n",
       "1       46526                 1ST SOURCE BANK        IN  722410    28-Feb-97   \n",
       "2       47401         GRANT COUNTY STATE BANK        IN  621210    28-Feb-97   \n",
       "3       74012   1ST NATL BK & TR CO OF BROKEN        OK       0    28-Feb-97   \n",
       "4       32801         FLORIDA BUS. DEVEL CORP        FL       0    28-Feb-97   \n",
       "...       ...                             ...       ...     ...          ...   \n",
       "899159  43221  JPMORGAN CHASE BANK NATL ASSOC        IL  451120    27-Feb-97   \n",
       "899160  43221  JPMORGAN CHASE BANK NATL ASSOC        IL  451130    27-Feb-97   \n",
       "899161  93455  RABOBANK, NATIONAL ASSOCIATION        CA  332321    27-Feb-97   \n",
       "899162  96830                  BANK OF HAWAII        HI       0    27-Feb-97   \n",
       "899163  96734            CENTRAL PACIFIC BANK        HI       0    27-Feb-97   \n",
       "\n",
       "       ApprovalFY  ...  RevLineCr  LowDoc  ChgOffDate  DisbursementDate  \\\n",
       "0            1997  ...          N       Y         NaN         28-Feb-99   \n",
       "1            1997  ...          N       Y         NaN         31-May-97   \n",
       "2            1997  ...          N       N         NaN         31-Dec-97   \n",
       "3            1997  ...          N       Y         NaN         30-Jun-97   \n",
       "4            1997  ...          N       N         NaN         14-May-97   \n",
       "...           ...  ...        ...     ...         ...               ...   \n",
       "899159       1997  ...          0       N         NaN         30-Sep-97   \n",
       "899160       1997  ...          Y       N         NaN         31-Oct-97   \n",
       "899161       1997  ...          N       N         NaN         30-Sep-97   \n",
       "899162       1997  ...          N       Y    8-Mar-00         31-Mar-97   \n",
       "899163       1997  ...          N       N         NaN         31-May-97   \n",
       "\n",
       "        DisbursementGross  BalanceGross  MIS_Status ChgOffPrinGr  \\\n",
       "0             $60,000.00         $0.00        P I F       $0.00    \n",
       "1             $40,000.00         $0.00        P I F       $0.00    \n",
       "2            $287,000.00         $0.00        P I F       $0.00    \n",
       "3             $35,000.00         $0.00        P I F       $0.00    \n",
       "4            $229,000.00         $0.00        P I F       $0.00    \n",
       "...                   ...           ...         ...          ...   \n",
       "899159        $70,000.00         $0.00        P I F       $0.00    \n",
       "899160        $85,000.00         $0.00        P I F       $0.00    \n",
       "899161       $300,000.00         $0.00        P I F       $0.00    \n",
       "899162        $75,000.00         $0.00       CHGOFF  $46,383.00    \n",
       "899163        $30,000.00         $0.00        P I F       $0.00    \n",
       "\n",
       "              GrAppv      SBA_Appv  \n",
       "0        $60,000.00    $48,000.00   \n",
       "1        $40,000.00    $32,000.00   \n",
       "2       $287,000.00   $215,250.00   \n",
       "3        $35,000.00    $28,000.00   \n",
       "4       $229,000.00   $229,000.00   \n",
       "...              ...           ...  \n",
       "899159   $70,000.00    $56,000.00   \n",
       "899160   $85,000.00    $42,500.00   \n",
       "899161  $300,000.00   $225,000.00   \n",
       "899162   $75,000.00    $60,000.00   \n",
       "899163   $30,000.00    $24,000.00   \n",
       "\n",
       "[899164 rows x 27 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Dataset 'SBAnational.csv' was taken from the Min Li, Amy Mickel & Stanley Taylor (2018) \n",
    "#“Should This Loan be Approved or Denied?”: A Large Dataset with Class Assignment Guidelines\n",
    "#Journal of Statistics Education, 26:1, 55-66, DOI: 10.1080/10691898.2018.1434342\n",
    "#URL for the article: https://doi.org/10.1080/10691898.2018.1434342\n",
    "\n",
    "#Reading from the file saving to SBAdf for Small Business Administration Dataset\n",
    "SBAdf = pd.read_csv(\"SBAnational.csv\", low_memory=False)\n",
    "\n",
    "#Examining our data\n",
    "SBAdf"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45b0fc4e",
   "metadata": {},
   "source": [
    "# Data Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ecfeb456",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Droping variables that will have no use to our end user, justification in the markdown below\n",
    "SBAdf2 = SBAdf.drop(['LoanNr_ChkDgt', 'Name', 'City', 'State', 'Zip', 'Bank', 'BankState', 'ApprovalFY','ChgOffDate', 'DisbursementDate', 'BalanceGross', 'ChgOffPrinGr'], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5155f73a",
   "metadata": {},
   "source": [
    "Eliminated the following variables at this stage of analysis:\n",
    "\n",
    "LoanNr_ChkDgt - This was the primary key for the dataset and is not needed since we have our own index and will not need to find specific loans in the future\n",
    "\n",
    "Name - This is the name of the business who is borrowing the SBA backed loan.  The name of the business won't have an impact on the final approval and can be dropped.\n",
    "\n",
    "City - This is being dropped since the time it would take to encode it and the amount it would contribute to a federally backed loan decision.  The work does not justify to payoff.\n",
    "\n",
    "Zip - Same as City\n",
    "\n",
    "State - Same as City\n",
    "\n",
    "BankState - Same as City\n",
    "\n",
    "Bank - This is being dropped because the final user interface will be for use by any banker or business owner, so knowing the approval rate of individual banks will not benefit our end user\n",
    "\n",
    "ApprovalFY - This could impact the default rate depending on loans being approved during times of feast and famine.  However, recessions don't always take entire years.  So we will encode approvaldata and drop approvalfy\n",
    "\n",
    "ChgOffDate - This column only contains the date for the loans that went into default.  We only need to know which loans went into default for our model, we do not need the exact date it occured.\n",
    "\n",
    "DisbursementDate - Knowing whether the loan was dispersed during a recession could be a good indicator of whether a loan will default.  However, since this variable is based on when the loan was dispersed after approval, it won't be of use to our pre-approval end user\n",
    "\n",
    "BalanceGross - Our end user won't be able to know the outstanding balance.  It will not be relvant for approvals."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "524e861f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NAICS</th>\n",
       "      <th>ApprovalDate</th>\n",
       "      <th>Term</th>\n",
       "      <th>NoEmp</th>\n",
       "      <th>NewExist</th>\n",
       "      <th>CreateJob</th>\n",
       "      <th>RetainedJob</th>\n",
       "      <th>FranchiseCode</th>\n",
       "      <th>UrbanRural</th>\n",
       "      <th>RevLineCr</th>\n",
       "      <th>LowDoc</th>\n",
       "      <th>DisbursementGross</th>\n",
       "      <th>MIS_Status</th>\n",
       "      <th>GrAppv</th>\n",
       "      <th>SBA_Appv</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>451120</td>\n",
       "      <td>28-Feb-97</td>\n",
       "      <td>84</td>\n",
       "      <td>4</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>$60,000.00</td>\n",
       "      <td>P I F</td>\n",
       "      <td>$60,000.00</td>\n",
       "      <td>$48,000.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>722410</td>\n",
       "      <td>28-Feb-97</td>\n",
       "      <td>60</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>$40,000.00</td>\n",
       "      <td>P I F</td>\n",
       "      <td>$40,000.00</td>\n",
       "      <td>$32,000.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>621210</td>\n",
       "      <td>28-Feb-97</td>\n",
       "      <td>180</td>\n",
       "      <td>7</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>$287,000.00</td>\n",
       "      <td>P I F</td>\n",
       "      <td>$287,000.00</td>\n",
       "      <td>$215,250.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>28-Feb-97</td>\n",
       "      <td>60</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>$35,000.00</td>\n",
       "      <td>P I F</td>\n",
       "      <td>$35,000.00</td>\n",
       "      <td>$28,000.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>28-Feb-97</td>\n",
       "      <td>240</td>\n",
       "      <td>14</td>\n",
       "      <td>1.0</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>$229,000.00</td>\n",
       "      <td>P I F</td>\n",
       "      <td>$229,000.00</td>\n",
       "      <td>$229,000.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899159</th>\n",
       "      <td>451120</td>\n",
       "      <td>27-Feb-97</td>\n",
       "      <td>60</td>\n",
       "      <td>6</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>$70,000.00</td>\n",
       "      <td>P I F</td>\n",
       "      <td>$70,000.00</td>\n",
       "      <td>$56,000.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899160</th>\n",
       "      <td>451130</td>\n",
       "      <td>27-Feb-97</td>\n",
       "      <td>60</td>\n",
       "      <td>6</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>$85,000.00</td>\n",
       "      <td>P I F</td>\n",
       "      <td>$85,000.00</td>\n",
       "      <td>$42,500.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899161</th>\n",
       "      <td>332321</td>\n",
       "      <td>27-Feb-97</td>\n",
       "      <td>108</td>\n",
       "      <td>26</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>$300,000.00</td>\n",
       "      <td>P I F</td>\n",
       "      <td>$300,000.00</td>\n",
       "      <td>$225,000.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899162</th>\n",
       "      <td>0</td>\n",
       "      <td>27-Feb-97</td>\n",
       "      <td>60</td>\n",
       "      <td>6</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>$75,000.00</td>\n",
       "      <td>CHGOFF</td>\n",
       "      <td>$75,000.00</td>\n",
       "      <td>$60,000.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899163</th>\n",
       "      <td>0</td>\n",
       "      <td>27-Feb-97</td>\n",
       "      <td>48</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>$30,000.00</td>\n",
       "      <td>P I F</td>\n",
       "      <td>$30,000.00</td>\n",
       "      <td>$24,000.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>899164 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         NAICS ApprovalDate  Term  NoEmp  NewExist  CreateJob  RetainedJob  \\\n",
       "0       451120    28-Feb-97    84      4       2.0          0            0   \n",
       "1       722410    28-Feb-97    60      2       2.0          0            0   \n",
       "2       621210    28-Feb-97   180      7       1.0          0            0   \n",
       "3            0    28-Feb-97    60      2       1.0          0            0   \n",
       "4            0    28-Feb-97   240     14       1.0          7            7   \n",
       "...        ...          ...   ...    ...       ...        ...          ...   \n",
       "899159  451120    27-Feb-97    60      6       1.0          0            0   \n",
       "899160  451130    27-Feb-97    60      6       1.0          0            0   \n",
       "899161  332321    27-Feb-97   108     26       1.0          0            0   \n",
       "899162       0    27-Feb-97    60      6       1.0          0            0   \n",
       "899163       0    27-Feb-97    48      1       2.0          0            0   \n",
       "\n",
       "        FranchiseCode  UrbanRural RevLineCr LowDoc DisbursementGross  \\\n",
       "0                   1           0         N      Y       $60,000.00    \n",
       "1                   1           0         N      Y       $40,000.00    \n",
       "2                   1           0         N      N      $287,000.00    \n",
       "3                   1           0         N      Y       $35,000.00    \n",
       "4                   1           0         N      N      $229,000.00    \n",
       "...               ...         ...       ...    ...               ...   \n",
       "899159              1           0         0      N       $70,000.00    \n",
       "899160              1           0         Y      N       $85,000.00    \n",
       "899161              1           0         N      N      $300,000.00    \n",
       "899162              1           0         N      Y       $75,000.00    \n",
       "899163              1           0         N      N       $30,000.00    \n",
       "\n",
       "       MIS_Status        GrAppv      SBA_Appv  \n",
       "0           P I F   $60,000.00    $48,000.00   \n",
       "1           P I F   $40,000.00    $32,000.00   \n",
       "2           P I F  $287,000.00   $215,250.00   \n",
       "3           P I F   $35,000.00    $28,000.00   \n",
       "4           P I F  $229,000.00   $229,000.00   \n",
       "...           ...           ...           ...  \n",
       "899159      P I F   $70,000.00    $56,000.00   \n",
       "899160      P I F   $85,000.00    $42,500.00   \n",
       "899161      P I F  $300,000.00   $225,000.00   \n",
       "899162     CHGOFF   $75,000.00    $60,000.00   \n",
       "899163      P I F   $30,000.00    $24,000.00   \n",
       "\n",
       "[899164 rows x 15 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Reviewing out data after the dropped variables\n",
    "SBAdf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e8de9205",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "NAICS                  int64\n",
       "ApprovalDate          object\n",
       "Term                   int64\n",
       "NoEmp                  int64\n",
       "NewExist             float64\n",
       "CreateJob              int64\n",
       "RetainedJob            int64\n",
       "FranchiseCode          int64\n",
       "UrbanRural             int64\n",
       "RevLineCr             object\n",
       "LowDoc                object\n",
       "DisbursementGross     object\n",
       "MIS_Status            object\n",
       "GrAppv                object\n",
       "SBA_Appv              object\n",
       "dtype: object"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Examing the datatypes of our dataframe to decide next steps\n",
    "SBAdf2.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bde27534",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Transforming our currency amounts with type(object) to floats\n",
    "SBAdf2['DisbursementGross'] = SBAdf2['DisbursementGross'].replace(\"\\$|,\",\"\", regex=True)\n",
    "SBAdf2['DisbursementGross'] = pd.to_numeric(SBAdf2['DisbursementGross'])\n",
    "\n",
    "SBAdf2['GrAppv'] = SBAdf2['GrAppv'].replace(\"\\$|,\",\"\", regex=True)\n",
    "SBAdf2['GrAppv'] = pd.to_numeric(SBAdf2['GrAppv'])\n",
    "\n",
    "SBAdf2['SBA_Appv'] = SBAdf2['SBA_Appv'].replace(\"\\$|,\",\"\", regex=True)\n",
    "SBAdf2['SBA_Appv'] = pd.to_numeric(SBAdf2['DisbursementGross'])\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0d36f2a",
   "metadata": {},
   "source": [
    "Knowing whether the economy was in a boom or recession year when the loan was approved could be valuable information for predicting our target variable.  However, just as a collection of years we cannot extrapulate much from it.  So I will transfrom it into a categorical variable that represents whether the year was a boom or recession.  Economic conditions was pulled from this source: https://www.nber.org/research/data/us-business-cycle-expansions-and-contractions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a5d10f17",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NAICS</th>\n",
       "      <th>ApprovalDate</th>\n",
       "      <th>Term</th>\n",
       "      <th>NoEmp</th>\n",
       "      <th>NewExist</th>\n",
       "      <th>CreateJob</th>\n",
       "      <th>RetainedJob</th>\n",
       "      <th>FranchiseCode</th>\n",
       "      <th>UrbanRural</th>\n",
       "      <th>RevLineCr</th>\n",
       "      <th>LowDoc</th>\n",
       "      <th>DisbursementGross</th>\n",
       "      <th>MIS_Status</th>\n",
       "      <th>GrAppv</th>\n",
       "      <th>SBA_Appv</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>451120</td>\n",
       "      <td>1997-02-28</td>\n",
       "      <td>84</td>\n",
       "      <td>4</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>60000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>60000.0</td>\n",
       "      <td>60000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>722410</td>\n",
       "      <td>1997-02-28</td>\n",
       "      <td>60</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>40000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>40000.0</td>\n",
       "      <td>40000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>621210</td>\n",
       "      <td>1997-02-28</td>\n",
       "      <td>180</td>\n",
       "      <td>7</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>287000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>287000.0</td>\n",
       "      <td>287000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>1997-02-28</td>\n",
       "      <td>60</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>35000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>35000.0</td>\n",
       "      <td>35000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>1997-02-28</td>\n",
       "      <td>240</td>\n",
       "      <td>14</td>\n",
       "      <td>1.0</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>229000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>229000.0</td>\n",
       "      <td>229000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899159</th>\n",
       "      <td>451120</td>\n",
       "      <td>1997-02-27</td>\n",
       "      <td>60</td>\n",
       "      <td>6</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>70000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>70000.0</td>\n",
       "      <td>70000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899160</th>\n",
       "      <td>451130</td>\n",
       "      <td>1997-02-27</td>\n",
       "      <td>60</td>\n",
       "      <td>6</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>85000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>85000.0</td>\n",
       "      <td>85000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899161</th>\n",
       "      <td>332321</td>\n",
       "      <td>1997-02-27</td>\n",
       "      <td>108</td>\n",
       "      <td>26</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>300000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>300000.0</td>\n",
       "      <td>300000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899162</th>\n",
       "      <td>0</td>\n",
       "      <td>1997-02-27</td>\n",
       "      <td>60</td>\n",
       "      <td>6</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>75000.0</td>\n",
       "      <td>CHGOFF</td>\n",
       "      <td>75000.0</td>\n",
       "      <td>75000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899163</th>\n",
       "      <td>0</td>\n",
       "      <td>1997-02-27</td>\n",
       "      <td>48</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>30000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>30000.0</td>\n",
       "      <td>30000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>899164 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         NAICS ApprovalDate  Term  NoEmp  NewExist  CreateJob  RetainedJob  \\\n",
       "0       451120   1997-02-28    84      4       2.0          0            0   \n",
       "1       722410   1997-02-28    60      2       2.0          0            0   \n",
       "2       621210   1997-02-28   180      7       1.0          0            0   \n",
       "3            0   1997-02-28    60      2       1.0          0            0   \n",
       "4            0   1997-02-28   240     14       1.0          7            7   \n",
       "...        ...          ...   ...    ...       ...        ...          ...   \n",
       "899159  451120   1997-02-27    60      6       1.0          0            0   \n",
       "899160  451130   1997-02-27    60      6       1.0          0            0   \n",
       "899161  332321   1997-02-27   108     26       1.0          0            0   \n",
       "899162       0   1997-02-27    60      6       1.0          0            0   \n",
       "899163       0   1997-02-27    48      1       2.0          0            0   \n",
       "\n",
       "        FranchiseCode  UrbanRural RevLineCr LowDoc  DisbursementGross  \\\n",
       "0                   1           0         N      Y            60000.0   \n",
       "1                   1           0         N      Y            40000.0   \n",
       "2                   1           0         N      N           287000.0   \n",
       "3                   1           0         N      Y            35000.0   \n",
       "4                   1           0         N      N           229000.0   \n",
       "...               ...         ...       ...    ...                ...   \n",
       "899159              1           0         0      N            70000.0   \n",
       "899160              1           0         Y      N            85000.0   \n",
       "899161              1           0         N      N           300000.0   \n",
       "899162              1           0         N      Y            75000.0   \n",
       "899163              1           0         N      N            30000.0   \n",
       "\n",
       "       MIS_Status    GrAppv  SBA_Appv  \n",
       "0           P I F   60000.0   60000.0  \n",
       "1           P I F   40000.0   40000.0  \n",
       "2           P I F  287000.0  287000.0  \n",
       "3           P I F   35000.0   35000.0  \n",
       "4           P I F  229000.0  229000.0  \n",
       "...           ...       ...       ...  \n",
       "899159      P I F   70000.0   70000.0  \n",
       "899160      P I F   85000.0   85000.0  \n",
       "899161      P I F  300000.0  300000.0  \n",
       "899162     CHGOFF   75000.0   75000.0  \n",
       "899163      P I F   30000.0   30000.0  \n",
       "\n",
       "[899164 rows x 15 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Processing the variable 'ApprovalDate'\n",
    "#Our ApprovalDate column has three letter month appreviations.  \n",
    "#To be able to interact with it better we will change the appreviation to the respective month numerical\n",
    "SBAdf2['ApprovalDate'] = SBAdf2['ApprovalDate'].str.replace('Jan','1')\n",
    "SBAdf2['ApprovalDate'] = SBAdf2['ApprovalDate'].str.replace('Feb','2')\n",
    "SBAdf2['ApprovalDate'] = SBAdf2['ApprovalDate'].str.replace('Mar','3')\n",
    "SBAdf2['ApprovalDate'] = SBAdf2['ApprovalDate'].str.replace('Apr','4')\n",
    "SBAdf2['ApprovalDate'] = SBAdf2['ApprovalDate'].str.replace('May','5')\n",
    "SBAdf2['ApprovalDate'] = SBAdf2['ApprovalDate'].str.replace('Jun','6')\n",
    "SBAdf2['ApprovalDate'] = SBAdf2['ApprovalDate'].str.replace('Jul','7')\n",
    "SBAdf2['ApprovalDate'] = SBAdf2['ApprovalDate'].str.replace('Aug','8')\n",
    "SBAdf2['ApprovalDate'] = SBAdf2['ApprovalDate'].str.replace('Sep','9')\n",
    "SBAdf2['ApprovalDate'] = SBAdf2['ApprovalDate'].str.replace('Oct','10')\n",
    "SBAdf2['ApprovalDate'] = SBAdf2['ApprovalDate'].str.replace('Nov','11')\n",
    "SBAdf2['ApprovalDate'] = SBAdf2['ApprovalDate'].str.replace('Dec','12')\n",
    "\n",
    "#Converting our variable to the datetime type\n",
    "SBAdf2['ApprovalDate'] = pd.to_datetime(SBAdf2['ApprovalDate'])\n",
    "SBAdf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "95ed2233",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>peak</th>\n",
       "      <th>trough</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1854-12-01</td>\n",
       "      <td>1854-12-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1858-12-01</td>\n",
       "      <td>1858-12-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1861-06-01</td>\n",
       "      <td>1861-06-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1867-12-01</td>\n",
       "      <td>1867-12-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1870-12-01</td>\n",
       "      <td>1870-12-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1879-03-01</td>\n",
       "      <td>1879-03-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1885-05-01</td>\n",
       "      <td>1885-05-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1888-04-01</td>\n",
       "      <td>1888-04-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1891-05-01</td>\n",
       "      <td>1891-05-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1894-06-01</td>\n",
       "      <td>1894-06-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1897-06-01</td>\n",
       "      <td>1897-06-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>1900-12-01</td>\n",
       "      <td>1900-12-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>1904-08-01</td>\n",
       "      <td>1904-08-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>1908-06-01</td>\n",
       "      <td>1908-06-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1912-01-01</td>\n",
       "      <td>1912-01-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1914-12-01</td>\n",
       "      <td>1914-12-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>1919-03-01</td>\n",
       "      <td>1919-03-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1921-07-01</td>\n",
       "      <td>1921-07-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1924-07-01</td>\n",
       "      <td>1924-07-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1927-11-01</td>\n",
       "      <td>1927-11-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>1933-03-01</td>\n",
       "      <td>1933-03-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>1938-06-01</td>\n",
       "      <td>1938-06-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>1945-10-01</td>\n",
       "      <td>1945-10-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>1949-10-01</td>\n",
       "      <td>1949-10-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>1954-05-01</td>\n",
       "      <td>1954-05-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>1958-04-01</td>\n",
       "      <td>1958-04-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>1961-02-01</td>\n",
       "      <td>1961-02-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>1970-11-01</td>\n",
       "      <td>1970-11-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>1975-03-01</td>\n",
       "      <td>1975-03-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>1980-07-01</td>\n",
       "      <td>1980-07-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>1982-11-01</td>\n",
       "      <td>1982-11-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>1991-03-01</td>\n",
       "      <td>1991-03-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>2001-11-01</td>\n",
       "      <td>2001-11-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>2009-06-01</td>\n",
       "      <td>2009-06-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>2020-04-01</td>\n",
       "      <td>2020-04-01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         peak      trough\n",
       "0  1854-12-01  1854-12-01\n",
       "1  1858-12-01  1858-12-01\n",
       "2  1861-06-01  1861-06-01\n",
       "3  1867-12-01  1867-12-01\n",
       "4  1870-12-01  1870-12-01\n",
       "5  1879-03-01  1879-03-01\n",
       "6  1885-05-01  1885-05-01\n",
       "7  1888-04-01  1888-04-01\n",
       "8  1891-05-01  1891-05-01\n",
       "9  1894-06-01  1894-06-01\n",
       "10 1897-06-01  1897-06-01\n",
       "11 1900-12-01  1900-12-01\n",
       "12 1904-08-01  1904-08-01\n",
       "13 1908-06-01  1908-06-01\n",
       "14 1912-01-01  1912-01-01\n",
       "15 1914-12-01  1914-12-01\n",
       "16 1919-03-01  1919-03-01\n",
       "17 1921-07-01  1921-07-01\n",
       "18 1924-07-01  1924-07-01\n",
       "19 1927-11-01  1927-11-01\n",
       "20 1933-03-01  1933-03-01\n",
       "21 1938-06-01  1938-06-01\n",
       "22 1945-10-01  1945-10-01\n",
       "23 1949-10-01  1949-10-01\n",
       "24 1954-05-01  1954-05-01\n",
       "25 1958-04-01  1958-04-01\n",
       "26 1961-02-01  1961-02-01\n",
       "27 1970-11-01  1970-11-01\n",
       "28 1975-03-01  1975-03-01\n",
       "29 1980-07-01  1980-07-01\n",
       "30 1982-11-01  1982-11-01\n",
       "31 1991-03-01  1991-03-01\n",
       "32 2001-11-01  2001-11-01\n",
       "33 2009-06-01  2009-06-01\n",
       "34 2020-04-01  2020-04-01"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Loading a dataset to view recession periods in US history\n",
    "#Data sources from: https://www.nber.org/research/data/us-business-cycle-expansions-and-contractions\n",
    "RDdf = pd.read_csv(\"Recessiondates.csv\", low_memory=False)\n",
    "RDdf['peak']= pd.to_datetime(RDdf['trough'])\n",
    "RDdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1e5c2679",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Using the dates from 'ApprovalDate' to create a new variable 'RecessionYN' this variable will show\n",
    "#a 1 for \"Recession Year\" or 0 for \"Not a Recession Year\"\n",
    "#Peak and end dates are taken from the dataset above\n",
    "peak = 19600401\n",
    "peak = pd.to_datetime(str(peak), format='%Y%m%d')\n",
    "end = 19610201\n",
    "end = pd.to_datetime(str(end), format='%Y%m%d')\n",
    "SBAdf2.loc[(SBAdf2['ApprovalDate'] >= peak) & (SBAdf2['ApprovalDate'] <= end), 'RecessionYN']='1'\n",
    "\n",
    "peak2 = 19691201\n",
    "peak2 = pd.to_datetime(str(peak2), format='%Y%m%d')\n",
    "end2 = 19701101\n",
    "end2 = pd.to_datetime(str(end2), format='%Y%m%d')\n",
    "SBAdf2.loc[(SBAdf2['ApprovalDate'] >= peak2) & (SBAdf2['ApprovalDate'] <= end2), 'RecessionYN']='1'\n",
    "\n",
    "peak3 = 19731101\n",
    "peak3 = pd.to_datetime(str(peak3), format='%Y%m%d')\n",
    "end3 = 19750301\n",
    "end3 = pd.to_datetime(str(end3), format='%Y%m%d')\n",
    "SBAdf2.loc[(SBAdf2['ApprovalDate'] >= peak3) & (SBAdf2['ApprovalDate'] <= end3), 'RecessionYN']='1'\n",
    "\n",
    "peak4 = 19800101\n",
    "peak4 = pd.to_datetime(str(peak4), format='%Y%m%d')\n",
    "end4 = 19800701\n",
    "end4 = pd.to_datetime(str(end4), format='%Y%m%d')\n",
    "SBAdf2.loc[(SBAdf2['ApprovalDate'] >= peak4) & (SBAdf2['ApprovalDate'] <= end4), 'RecessionYN']='1'\n",
    "\n",
    "peak5 = 19810701\n",
    "peak5 = pd.to_datetime(str(peak5), format='%Y%m%d')\n",
    "end5 = 19821101\n",
    "end5 = pd.to_datetime(str(end5), format='%Y%m%d')\n",
    "SBAdf2.loc[(SBAdf2['ApprovalDate'] >= peak5) & (SBAdf2['ApprovalDate'] <= end5), 'RecessionYN']='1'\n",
    "\n",
    "peak6 = 19900701\n",
    "peak6 = pd.to_datetime(str(peak6), format='%Y%m%d')\n",
    "end6 = 19910301\n",
    "end6 = pd.to_datetime(str(end6), format='%Y%m%d')\n",
    "SBAdf2.loc[(SBAdf2['ApprovalDate'] >= peak6) & (SBAdf2['ApprovalDate'] <= end6), 'RecessionYN']='1'\n",
    "\n",
    "peak7 = 20010301\n",
    "peak7 = pd.to_datetime(str(peak7), format='%Y%m%d')\n",
    "end7 = 20011101\n",
    "end7 = pd.to_datetime(str(end7), format='%Y%m%d')\n",
    "SBAdf2.loc[(SBAdf2['ApprovalDate'] >= peak7) & (SBAdf2['ApprovalDate'] <= end7), 'RecessionYN']='1'\n",
    "\n",
    "peak7 = 20071201\n",
    "peak7 = pd.to_datetime(str(peak7), format='%Y%m%d')\n",
    "end7 = 20090601\n",
    "end7 = pd.to_datetime(str(end7), format='%Y%m%d')\n",
    "SBAdf2.loc[(SBAdf2['ApprovalDate'] >= peak7) & (SBAdf2['ApprovalDate'] <= end7), 'RecessionYN']='1'\n",
    "\n",
    "#Replacing our missing values with 0\n",
    "#Code taken from: https://stackoverflow.com/questions/52835971/fill-nan-with-zero-python-pandas\n",
    "SBAdf2['RecessionYN'] = pd.to_numeric(SBAdf2['RecessionYN'], errors='coerce').fillna(0)\n",
    "SBAdf2['RecessionYN'] = SBAdf2['RecessionYN'].astype(int)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "473fe1a6",
   "metadata": {},
   "source": [
    "The Franchise Code is an important categorical variable for our analysis.  However, we do not need to know what the specific franchise is for"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2ba25e1f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NAICS</th>\n",
       "      <th>ApprovalDate</th>\n",
       "      <th>Term</th>\n",
       "      <th>NoEmp</th>\n",
       "      <th>NewExist</th>\n",
       "      <th>CreateJob</th>\n",
       "      <th>RetainedJob</th>\n",
       "      <th>FranchiseCode</th>\n",
       "      <th>UrbanRural</th>\n",
       "      <th>RevLineCr</th>\n",
       "      <th>LowDoc</th>\n",
       "      <th>DisbursementGross</th>\n",
       "      <th>MIS_Status</th>\n",
       "      <th>GrAppv</th>\n",
       "      <th>SBA_Appv</th>\n",
       "      <th>RecessionYN</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>160</th>\n",
       "      <td>0</td>\n",
       "      <td>1997-12-06</td>\n",
       "      <td>84</td>\n",
       "      <td>10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>25000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>25000.0</td>\n",
       "      <td>25000.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161</th>\n",
       "      <td>441120</td>\n",
       "      <td>1997-02-28</td>\n",
       "      <td>300</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>221000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>221000.0</td>\n",
       "      <td>221000.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>162</th>\n",
       "      <td>541330</td>\n",
       "      <td>1997-12-06</td>\n",
       "      <td>84</td>\n",
       "      <td>5</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>25000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>25000.0</td>\n",
       "      <td>25000.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>164</th>\n",
       "      <td>0</td>\n",
       "      <td>1997-12-06</td>\n",
       "      <td>84</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>25000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>25000.0</td>\n",
       "      <td>25000.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>165</th>\n",
       "      <td>0</td>\n",
       "      <td>1997-12-06</td>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>40000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>40000.0</td>\n",
       "      <td>40000.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>166</th>\n",
       "      <td>621210</td>\n",
       "      <td>1997-02-28</td>\n",
       "      <td>108</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>112000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>112000.0</td>\n",
       "      <td>112000.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>167</th>\n",
       "      <td>422810</td>\n",
       "      <td>1997-02-28</td>\n",
       "      <td>102</td>\n",
       "      <td>10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>80000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>80000.0</td>\n",
       "      <td>80000.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>168</th>\n",
       "      <td>0</td>\n",
       "      <td>1997-06-13</td>\n",
       "      <td>84</td>\n",
       "      <td>9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>25000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>25000.0</td>\n",
       "      <td>25000.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>169</th>\n",
       "      <td>0</td>\n",
       "      <td>1997-02-28</td>\n",
       "      <td>180</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>134200.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>135000.0</td>\n",
       "      <td>134200.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>170</th>\n",
       "      <td>722410</td>\n",
       "      <td>1997-06-16</td>\n",
       "      <td>180</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>70000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>70000.0</td>\n",
       "      <td>70000.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>171</th>\n",
       "      <td>0</td>\n",
       "      <td>1980-06-18</td>\n",
       "      <td>10</td>\n",
       "      <td>22</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>125000.0</td>\n",
       "      <td>CHGOFF</td>\n",
       "      <td>125000.0</td>\n",
       "      <td>125000.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>172</th>\n",
       "      <td>541430</td>\n",
       "      <td>1997-06-17</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>75000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>75000.0</td>\n",
       "      <td>75000.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>173</th>\n",
       "      <td>421810</td>\n",
       "      <td>1997-06-18</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>100000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>100000.0</td>\n",
       "      <td>100000.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>174</th>\n",
       "      <td>0</td>\n",
       "      <td>1997-02-28</td>\n",
       "      <td>240</td>\n",
       "      <td>6</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>108000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>108000.0</td>\n",
       "      <td>108000.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>175</th>\n",
       "      <td>0</td>\n",
       "      <td>1997-06-19</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>20000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>20000.0</td>\n",
       "      <td>20000.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>176</th>\n",
       "      <td>0</td>\n",
       "      <td>1997-06-20</td>\n",
       "      <td>12</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>20000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>20000.0</td>\n",
       "      <td>20000.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>177</th>\n",
       "      <td>512110</td>\n",
       "      <td>1997-06-20</td>\n",
       "      <td>12</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>25000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>25000.0</td>\n",
       "      <td>25000.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>178</th>\n",
       "      <td>812320</td>\n",
       "      <td>1997-06-23</td>\n",
       "      <td>60</td>\n",
       "      <td>40</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>25000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>25000.0</td>\n",
       "      <td>25000.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>179</th>\n",
       "      <td>332117</td>\n",
       "      <td>2006-07-02</td>\n",
       "      <td>90</td>\n",
       "      <td>72</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>255000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>331200.0</td>\n",
       "      <td>255000.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>180</th>\n",
       "      <td>454110</td>\n",
       "      <td>1997-02-28</td>\n",
       "      <td>120</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>300000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>300000.0</td>\n",
       "      <td>300000.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      NAICS ApprovalDate  Term  NoEmp  NewExist  CreateJob  RetainedJob  \\\n",
       "160       0   1997-12-06    84     10       1.0          0            0   \n",
       "161  441120   1997-02-28   300      1       1.0          0            0   \n",
       "162  541330   1997-12-06    84      5       1.0          0            0   \n",
       "164       0   1997-12-06    84      3       1.0          0            0   \n",
       "165       0   1997-12-06    12      2       1.0          0            0   \n",
       "166  621210   1997-02-28   108      2       1.0          0            0   \n",
       "167  422810   1997-02-28   102     10       1.0          0            0   \n",
       "168       0   1997-06-13    84      9       1.0          0            0   \n",
       "169       0   1997-02-28   180      1       1.0          0            0   \n",
       "170  722410   1997-06-16   180      2       0.0          0            0   \n",
       "171       0   1980-06-18    10     22       2.0          0            0   \n",
       "172  541430   1997-06-17    12      1       1.0          0            0   \n",
       "173  421810   1997-06-18    12      1       1.0          0            0   \n",
       "174       0   1997-02-28   240      6       1.0          6            4   \n",
       "175       0   1997-06-19    13      1       1.0          0            0   \n",
       "176       0   1997-06-20    12      3       1.0          0            0   \n",
       "177  512110   1997-06-20    12      3       1.0          0            0   \n",
       "178  812320   1997-06-23    60     40       1.0          0            0   \n",
       "179  332117   2006-07-02    90     72       2.0          1            3   \n",
       "180  454110   1997-02-28   120      1       2.0          0            0   \n",
       "\n",
       "     FranchiseCode  UrbanRural RevLineCr LowDoc  DisbursementGross MIS_Status  \\\n",
       "160              1           0         0      N            25000.0      P I F   \n",
       "161              1           0         0      N           221000.0      P I F   \n",
       "162              1           0         0      N            25000.0      P I F   \n",
       "164              1           0         0      N            25000.0      P I F   \n",
       "165              1           0         0      N            40000.0      P I F   \n",
       "166              1           0         0      N           112000.0      P I F   \n",
       "167              1           0         0      N            80000.0      P I F   \n",
       "168              1           0         0      N            25000.0      P I F   \n",
       "169              1           0         N      N           134200.0      P I F   \n",
       "170              1           0         0      N            70000.0      P I F   \n",
       "171              0           0         N      N           125000.0     CHGOFF   \n",
       "172              1           0         0      N            75000.0      P I F   \n",
       "173              1           0         0      N           100000.0      P I F   \n",
       "174              1           0         N      N           108000.0      P I F   \n",
       "175              1           0         0      N            20000.0      P I F   \n",
       "176              1           0         0      N            20000.0      P I F   \n",
       "177              1           0         0      N            25000.0      P I F   \n",
       "178              1           0         0      N            25000.0      P I F   \n",
       "179              1           1         0      N           255000.0      P I F   \n",
       "180              1           0         0      N           300000.0      P I F   \n",
       "\n",
       "       GrAppv  SBA_Appv  RecessionYN  \n",
       "160   25000.0   25000.0            0  \n",
       "161  221000.0  221000.0            0  \n",
       "162   25000.0   25000.0            0  \n",
       "164   25000.0   25000.0            0  \n",
       "165   40000.0   40000.0            0  \n",
       "166  112000.0  112000.0            0  \n",
       "167   80000.0   80000.0            0  \n",
       "168   25000.0   25000.0            0  \n",
       "169  135000.0  134200.0            0  \n",
       "170   70000.0   70000.0            0  \n",
       "171  125000.0  125000.0            1  \n",
       "172   75000.0   75000.0            0  \n",
       "173  100000.0  100000.0            0  \n",
       "174  108000.0  108000.0            0  \n",
       "175   20000.0   20000.0            0  \n",
       "176   20000.0   20000.0            0  \n",
       "177   25000.0   25000.0            0  \n",
       "178   25000.0   25000.0            0  \n",
       "179  331200.0  255000.0            0  \n",
       "180  300000.0  300000.0            0  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Reviewing our data processing to this point.  From examining the 'ApprovalDate' we know instance\n",
    "#171 was a loan approved during a recession.  If our processing worked the rest will show '0' and 171 will show '1'\n",
    "SBAdf2.iloc[[160,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "80f90c92",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Dropping the ApprovalDate now that our new variable has been successfully created\n",
    "SBAdf2 = SBAdf2.drop(['ApprovalDate'], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6854d65",
   "metadata": {},
   "source": [
    "The Franchise Code is an important categorical variable for our analysis.  However, we do not need to know what the specific franchise each loan represents since there are many options.  Instead, we will encode our 'FranchiseCode' variable so it just shows 1 for is franchise, and 0 for is not franchise.\n",
    "\n",
    "We see from our documentation above that if the franchise code is 0 or 1 it is not a franchise, but any series of numbers larger than that was a code for a specific franchise.  However, examining our CSV file we see that there are 12 that were coded '3' in error.  So we need to process 0,1,3 as \"Not a Franchise\" and anything else as \"Is a Franchise\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "637125f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NAICS</th>\n",
       "      <th>Term</th>\n",
       "      <th>NoEmp</th>\n",
       "      <th>NewExist</th>\n",
       "      <th>CreateJob</th>\n",
       "      <th>RetainedJob</th>\n",
       "      <th>FranchiseCode</th>\n",
       "      <th>UrbanRural</th>\n",
       "      <th>RevLineCr</th>\n",
       "      <th>LowDoc</th>\n",
       "      <th>DisbursementGross</th>\n",
       "      <th>MIS_Status</th>\n",
       "      <th>GrAppv</th>\n",
       "      <th>SBA_Appv</th>\n",
       "      <th>RecessionYN</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>721310</td>\n",
       "      <td>297</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>305000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>305000.0</td>\n",
       "      <td>305000.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0</td>\n",
       "      <td>84</td>\n",
       "      <td>3</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>70000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>70000.0</td>\n",
       "      <td>70000.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>811111</td>\n",
       "      <td>84</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>70000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>70000.0</td>\n",
       "      <td>70000.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>235950</td>\n",
       "      <td>60</td>\n",
       "      <td>24</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>150000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>300000.0</td>\n",
       "      <td>150000.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>445299</td>\n",
       "      <td>162</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>253400.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>253400.0</td>\n",
       "      <td>253400.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0</td>\n",
       "      <td>120</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>370000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>370000.0</td>\n",
       "      <td>370000.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0</td>\n",
       "      <td>240</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>225000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>225000.0</td>\n",
       "      <td>225000.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>421330</td>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>350000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>350000.0</td>\n",
       "      <td>350000.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>5</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>70000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>70000.0</td>\n",
       "      <td>70000.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>16</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>100000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>100000.0</td>\n",
       "      <td>100000.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>0</td>\n",
       "      <td>84</td>\n",
       "      <td>12</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>57500.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>57500.0</td>\n",
       "      <td>57500.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     NAICS  Term  NoEmp  NewExist  CreateJob  RetainedJob  FranchiseCode  \\\n",
       "8   721310   297      2       2.0          0            0              0   \n",
       "9        0    84      3       2.0          0            0              0   \n",
       "10  811111    84      1       2.0          0            0              0   \n",
       "11  235950    60     24       1.0          0            0              0   \n",
       "12  445299   162      2       2.0          0            0              1   \n",
       "13       0   120      2       2.0          0            0              0   \n",
       "14       0   240      1       1.0         30            0              0   \n",
       "15  421330    12      5       2.0          0            0              0   \n",
       "16       0    60      5       1.0          0            0              0   \n",
       "17       0    60     16       1.0          0            0              0   \n",
       "18       0    84     12       2.0          0            0              1   \n",
       "\n",
       "    UrbanRural RevLineCr LowDoc  DisbursementGross MIS_Status    GrAppv  \\\n",
       "8            0         N      N           305000.0      P I F  305000.0   \n",
       "9            0         N      Y            70000.0      P I F   70000.0   \n",
       "10           0         N      Y            70000.0      P I F   70000.0   \n",
       "11           0         N      N           150000.0      P I F  300000.0   \n",
       "12           1         N      N           253400.0      P I F  253400.0   \n",
       "13           0         N      N           370000.0      P I F  370000.0   \n",
       "14           0         N      N           225000.0      P I F  225000.0   \n",
       "15           0         N      N           350000.0      P I F  350000.0   \n",
       "16           0         N      Y            70000.0      P I F   70000.0   \n",
       "17           0         N      Y           100000.0      P I F  100000.0   \n",
       "18           0         N      Y            57500.0      P I F   57500.0   \n",
       "\n",
       "    SBA_Appv  RecessionYN  \n",
       "8   305000.0            0  \n",
       "9    70000.0            0  \n",
       "10   70000.0            0  \n",
       "11  150000.0            0  \n",
       "12  253400.0            0  \n",
       "13  370000.0            0  \n",
       "14  225000.0            0  \n",
       "15  350000.0            0  \n",
       "16   70000.0            0  \n",
       "17  100000.0            0  \n",
       "18   57500.0            0  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Encoding our 'FranchiseCode' variable to become a hot code, 0 for \"Not Franchise\" and 1 for \"Yes Franchise\"\n",
    "SBAdf2.loc[SBAdf2['FranchiseCode'] < 4, 'FranchiseCode']=0\n",
    "SBAdf2.loc[SBAdf2['FranchiseCode'] >= 4, 'FranchiseCode']=1\n",
    "#Reviewing to see if our changes worked.  From examining the CSV I know observation 12 and 18 are franchises\n",
    "#So those two should show '1' and the rest '0'\n",
    "SBAdf2.iloc[[8,9,10,11,12,13,14,15,16,17,18]]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd5db9a3",
   "metadata": {},
   "source": [
    "NAICS is a categorical variable reflecting which industry the company applying for the loan is in. OneHotEncoding this in its current state is not feasabile since there are too many represented. However, the first 2 digits of this 6 digit code represents its larger industry, with the other 4 representing subcategories. So we can first reduce this column to its first 2 digits and then OneHotEncode from there."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e74710cd",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Term</th>\n",
       "      <th>NoEmp</th>\n",
       "      <th>NewExist</th>\n",
       "      <th>CreateJob</th>\n",
       "      <th>RetainedJob</th>\n",
       "      <th>FranchiseCode</th>\n",
       "      <th>UrbanRural</th>\n",
       "      <th>RevLineCr</th>\n",
       "      <th>LowDoc</th>\n",
       "      <th>DisbursementGross</th>\n",
       "      <th>MIS_Status</th>\n",
       "      <th>GrAppv</th>\n",
       "      <th>SBA_Appv</th>\n",
       "      <th>RecessionYN</th>\n",
       "      <th>NAICS_Short</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>84</td>\n",
       "      <td>4</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>60000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>60000.0</td>\n",
       "      <td>60000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>60</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>40000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>40000.0</td>\n",
       "      <td>40000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>180</td>\n",
       "      <td>7</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>287000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>287000.0</td>\n",
       "      <td>287000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>60</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>35000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>35000.0</td>\n",
       "      <td>35000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>240</td>\n",
       "      <td>14</td>\n",
       "      <td>1.0</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>229000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>229000.0</td>\n",
       "      <td>229000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899159</th>\n",
       "      <td>60</td>\n",
       "      <td>6</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>70000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>70000.0</td>\n",
       "      <td>70000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899160</th>\n",
       "      <td>60</td>\n",
       "      <td>6</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>85000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>85000.0</td>\n",
       "      <td>85000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899161</th>\n",
       "      <td>108</td>\n",
       "      <td>26</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>300000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>300000.0</td>\n",
       "      <td>300000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899162</th>\n",
       "      <td>60</td>\n",
       "      <td>6</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>75000.0</td>\n",
       "      <td>CHGOFF</td>\n",
       "      <td>75000.0</td>\n",
       "      <td>75000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899163</th>\n",
       "      <td>48</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>30000.0</td>\n",
       "      <td>P I F</td>\n",
       "      <td>30000.0</td>\n",
       "      <td>30000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>899164 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Term  NoEmp  NewExist  CreateJob  RetainedJob  FranchiseCode  \\\n",
       "0         84      4       2.0          0            0              0   \n",
       "1         60      2       2.0          0            0              0   \n",
       "2        180      7       1.0          0            0              0   \n",
       "3         60      2       1.0          0            0              0   \n",
       "4        240     14       1.0          7            7              0   \n",
       "...      ...    ...       ...        ...          ...            ...   \n",
       "899159    60      6       1.0          0            0              0   \n",
       "899160    60      6       1.0          0            0              0   \n",
       "899161   108     26       1.0          0            0              0   \n",
       "899162    60      6       1.0          0            0              0   \n",
       "899163    48      1       2.0          0            0              0   \n",
       "\n",
       "        UrbanRural RevLineCr LowDoc  DisbursementGross MIS_Status    GrAppv  \\\n",
       "0                0         N      Y            60000.0      P I F   60000.0   \n",
       "1                0         N      Y            40000.0      P I F   40000.0   \n",
       "2                0         N      N           287000.0      P I F  287000.0   \n",
       "3                0         N      Y            35000.0      P I F   35000.0   \n",
       "4                0         N      N           229000.0      P I F  229000.0   \n",
       "...            ...       ...    ...                ...        ...       ...   \n",
       "899159           0         0      N            70000.0      P I F   70000.0   \n",
       "899160           0         Y      N            85000.0      P I F   85000.0   \n",
       "899161           0         N      N           300000.0      P I F  300000.0   \n",
       "899162           0         N      Y            75000.0     CHGOFF   75000.0   \n",
       "899163           0         N      N            30000.0      P I F   30000.0   \n",
       "\n",
       "        SBA_Appv  RecessionYN  NAICS_Short  \n",
       "0        60000.0            0           45  \n",
       "1        40000.0            0           72  \n",
       "2       287000.0            0           62  \n",
       "3        35000.0            0            0  \n",
       "4       229000.0            0            0  \n",
       "...          ...          ...          ...  \n",
       "899159   70000.0            0           45  \n",
       "899160   85000.0            0           45  \n",
       "899161  300000.0            0           33  \n",
       "899162   75000.0            0            0  \n",
       "899163   30000.0            0            0  \n",
       "\n",
       "[899164 rows x 15 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Processing the variable 'NAICS'\n",
    "SBAdf2['NAICS_Short'] = SBAdf2.NAICS.astype(str).str[:2].astype(int)\n",
    "SBAdf3 = SBAdf2.drop(['NAICS'], axis = 1)\n",
    "SBAdf3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3b1c0e8c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unique values in Term [ 84  60 180 240 120  45 297 162  12 300  87 114 144 126  83 102  80 137\n",
      "  42  96 167   7  36  37  26 264  72  24   5  54  66 161  71   4  93 288\n",
      " 108  10  13  90  19  16   3  27 149  41 246  18  57 104  82 298  14  61\n",
      " 127  58  44  32  85  48  31 112  38  73  47  11 134  15  79  53  39   6\n",
      " 255  55 133  95  35  59  62  68 123  46  70 138  40  52  25  65  91   1\n",
      "  74  49 103  77  86  63  56  22   0  97  23  17  69  21  43  89 276  92\n",
      " 183   2 132  34 131   9  78  99 129 216   8  29 289  30 119 228 168 208\n",
      "  81 147 125  94  51 211  64 111 266  75 306  28 232 117 118 309 303  98\n",
      " 191 116  76 113 292  88 166 244 176 258 203 231 142  33 157 165  50 210\n",
      " 294 301 106  20 318 229 204 269 241 178 115 174 192  67 100 141 282 122\n",
      " 156 153 268 249 238 233 105 263 124 279 140 186 107 190 308 128 243 302\n",
      " 299 280 223 311 222 202 257 130 101 121 278 272 319 283 221 250 290 199\n",
      " 252 187 310 304 136 261 196 181 175 195 177 139 110 242 270 277 184 150\n",
      " 207 358 213 273 357 248 275 164 239 206 215 170 254 217 172 158 218 189\n",
      " 256 179 262 193 146 155 135 185 307 200 109 265 349 209 236 251 145 152\n",
      " 169 245 230 285 201 293 171 227 188 225 247 163 143 235 160 148 253 159\n",
      " 295 198 271 234 237 336 220 291 287 154 219 197 312 284 281 151 267 274\n",
      " 182 212 305 205 226 194 259 214 173 224 385 313 340 461 296 343 348 286\n",
      " 260 334 320 315 360 421 342 351 372 314 354 435 316 480 329 387 325 321\n",
      " 317 352 359 389 333 330 417 404 370 324 398 419 425 414 365 345 481 350\n",
      " 335 369 341 355 362 322 339 375 323 347 327 505 326 418 328 363 413 361\n",
      " 356 396 438 382 364 367 374 442 353 527 569 338 366 386 368 428 346 388\n",
      " 430 443 381 409 445 384 391 511 412 449 403 434 402 423 440 429]\n",
      "Unique values in NoEmp [   4    2    7   14   19   45    1    3   24    5   16   12    6   90\n",
      "   18    9   20   10    8   50   17   32   31   60   22   40   72   55\n",
      "   30   25   46   15  214   28   23   11   57   13  112   26   80   42\n",
      "   65   21   97  100  200  126   48   33   58   38   37   35    0   75\n",
      "   36   70   66   27 2000   56   34   93   85  150   29   41  290   67\n",
      "   44   47  119   39  155   54   49   82   95  300   51  120  265  133\n",
      "   86  160   68   61  220   43   71   98  350   78  233  263   62 7941\n",
      "   63  210  125  107  450  165  130 9992   77   64  424  257   52  600\n",
      "  190  142   99   59   73  135   74  109  250   69  500  140  116  260\n",
      "   96  339   87  110  161   88  105   53  400 2725  605  103   91   81\n",
      "   94  147  144  175  136  182  156  118  375  345  121  145  180  101\n",
      "   84   89   76  550  216  108  138  171  117  249  279  208  170   79\n",
      " 9999  115  104  900   83  153  106  191  270  102  295 3000  230  195\n",
      "  127  313  205  141  128  199  124  162  305  185  152  129  275  576\n",
      "  132  196  640  178  750  720  414  315  143  299  217  179  320 1145\n",
      " 4000  167  114  203  134 8000  111 5511 5921   92  240  280  148  340\n",
      "  285 1300 1800  680  258  231  173 1980  510 5812  401 7212  192 5084\n",
      "  480  186  131  146  168 1050  189  343 7216  312 8041  394  307 7389\n",
      "  174  828  485  266 2100 1000 5947  368 1600 5000 1500  298 6000  221\n",
      " 4953  360  355  137  325  123  122  344  163  386  530  237  330  188\n",
      "  387 1003  761  421  113  308  158  310  187  238  235  222 7111 2112\n",
      "  254 1200  225  228 2400  317  425 8018  430  197  157  176  198  256\n",
      " 3200  183  277  362  202  289  139  520  154 2151  177  316  224  149\n",
      "  151  215  395  426  262 6501  169  282 4100  383  172  688  287 1250\n",
      "  390  318 4847 7231 5149 3900  967 3500  314  602  476  206 1461  274\n",
      "  408  441  246  336  570  227 1940  735  523  204 1233 3170 1711  255\n",
      "  351 1451  207  365  454 1550  823  544 1150  294 9000  226 7000  463\n",
      "  211  370 2900 4005 1900  241  288  194  213  278  332  484  281  322\n",
      "  650  181  521  218  800  420 3400 1400  700  242 2200 2500  625  495\n",
      "  358  243  466  354  223  184  479  269  435  342  385  193  232  827\n",
      " 2401  273  713  253  261  296 2501 1629 1700  429 2010  455  660  164\n",
      " 1235  252  376  380  464  245 1100  608  209  247 5555  329  604  456\n",
      "  166 1280 3089  985 1020  505 1502  234 5200  284  609  259  475  324\n",
      " 5680 1981  323  251  740  575  396 1030  229 2610  515  328  442  433\n",
      " 2232  341  306 3732  346  447  850  427  407  782  293  236  356 4685\n",
      " 7241  363 1005  369  458  267 7999 2020  445 2121 1125 1010 4658  712\n",
      "  212  271  377 1718 1515  560  404  302  276  248 1015  268 3737  319\n",
      " 2120  304  512  585  292  808  244 9090 3030  606  840  460  301 2300\n",
      " 3600  159  525  353 7991 5211 4012 1112 1440  413  410  488 4501 4800\n",
      " 3100 3334  538 1603 1706 2520  283 1520 2202  357  201 1012  499  423\n",
      "  635 1073  465 2510 1644 1101  403 4300  382  498  448 3009  685 1340\n",
      " 2700  367  535  760 1524  309 7007  384  327 1960  540 5013  780  348\n",
      "  717 8500 7538  405 2005 1382  858 9945 1542 1920 3713]\n",
      "Unique values in CreateJob [   0    7   30    5    4    1   20   10    3    8   16   15    6   11\n",
      "    2   40   55   25   12   21   50    9   13   47   18   17   14   29\n",
      "   23   35   43   75   22   45   27   65   19   58   48   72   38   28\n",
      "   24  150  200   82   68   41   80   70   33   97   32   26   34   36\n",
      "   31  100   56   60   90   77   99   39   44   51  120   85   69   95\n",
      "   42  160   37   57  600   49 1000   53   54   46   59  163  450  456\n",
      " 3000  452  451  198   79  454   62  136   64   52  126  180   74  303\n",
      "   63  386   78   98  455   76  152  221  110   84  153  127 2020  225\n",
      "  453  125  458  457  174  104   89  320  154  300  102  149 8800  800\n",
      "  130  235 5199  250  137  500  121  105   96  360  255  140  122  175\n",
      " 1200   66  112 3500  118  220  115   73   93  151  195   67  138  400\n",
      "   61  124   91 1711  131  184   83  409 1618 1150   88 1530  157  145\n",
      "  166  135  210  226  183 3100  252  116   71  129  223   81  569  139\n",
      "  144 1011  179  214  146  171  141  350   92  101  119  280  123  205\n",
      " 1229  128  103  189  114  108  158  167   87  186   86  134 1100  750\n",
      "  206  375  109  433 2140  177  264  168  240 5621  170  169  165  222\n",
      "  106  148  363 1118  310  164 5085  143  480  256  365  155  190  397\n",
      " 1027  270   94 2515  162  182 1016  860]\n",
      "Unique values in RetainedJob [   0    7   23    4    6    1    9   20    2    5   19    8    3   10\n",
      "   24   12   15   11   25   44   17   14   65   28   38   16   42   26\n",
      "   18   13   50   93   40   37   60   21   30   31   34   35  150   22\n",
      "   73   41   45  100  180   58   75  165   36  130   29   27  125   99\n",
      "   46   32  257   43   47   80   70   54   62   33   39  400   55   95\n",
      "   48  120   71   63   81   52   94   78  160  109   86   77  155   85\n",
      "   90   64 3225   61   69   66  210  107   97   51   83  112   53   72\n",
      "   76   87   68  118  138   67   57   56  117  171  229  115  275  153\n",
      "  300  105  140  135   59   79  200  295  205  206  128  186  137  250\n",
      "   89   49  131   92  404  110  320  139   82  108   88  104  114  134\n",
      "  230  102  103   96   98   84  101  220  233   74  267   91 9500  355\n",
      "  123  175  550  500  450  170  195  116  305  147  610  187  235  157\n",
      "  124  127  106  254 4441  277  225  207  111  312  317  173  350  216\n",
      "  143  430  197  176  145  126  133  256 2200  362  202  148  316 8800\n",
      "  215  146  185  154  212  141  163  184 5000 3200  132  194  113  161\n",
      "  172  330  366  190 1300  390 4000  476 3900  967  268  136  602  121\n",
      "  240  122  162  523  204  159 1711  119  251  152  417  291  544  129\n",
      "  142  231  189  203  360  213  278  280  484  260  177  281  675  226\n",
      "  263  700  247  600  245  750  151  270  375  191  182  223 7250  214\n",
      "  169  342  221  217  232  815  287  285  188 1000 1700  428  660  156\n",
      " 1500  318  265  167  236  370  310  609  475  322  208  515  259  328\n",
      "  497  356  255  158  192  166  219  363  274  144  262  315  178  420\n",
      "  286  585  325  201  710  196  384  237  940  302  371  394 1600 3860\n",
      "  244  393  410  472  720  168  252  290  297  548  485  183  800  149\n",
      "  387  298  480  266  164  403  369  498  448  685  535  292  327  911\n",
      " 3100  540  304 1111  243  199  900  198]\n",
      "Unique values in DisbursementGross [  60000.   40000.  287000. ...  377446.  123770. 1086300.]\n",
      "Unique values in GrAppv [  60000.   40000.  287000. ...   12480.   62425. 1086300.]\n",
      "Unique values in SBA_Appv [  60000.   40000.  287000. ...  377446.  123770. 1086300.]\n"
     ]
    }
   ],
   "source": [
    "#Looking for NaN or any other values that do not fit in some of our other variables\n",
    "UniqueT = pd.unique(SBAdf3.Term)\n",
    "UniqueNO = pd.unique(SBAdf3.NoEmp)\n",
    "UniqueCJ = pd.unique(SBAdf3.CreateJob)\n",
    "UniqueRJ = pd.unique(SBAdf3.RetainedJob)\n",
    "UniqueDG = pd.unique(SBAdf3.DisbursementGross)\n",
    "UniqueGA = pd.unique(SBAdf3.GrAppv)\n",
    "UniqueSBA = pd.unique(SBAdf3.SBA_Appv)\n",
    "\n",
    "print(f\"Unique values in Term {UniqueT}\")\n",
    "print(f\"Unique values in NoEmp {UniqueNO}\")\n",
    "print(f\"Unique values in CreateJob {UniqueCJ}\")\n",
    "print(f\"Unique values in RetainedJob {UniqueRJ}\")\n",
    "print(f\"Unique values in DisbursementGross {UniqueDG}\")\n",
    "print(f\"Unique values in GrAppv {UniqueGA}\")\n",
    "print(f\"Unique values in SBA_Appv {UniqueSBA}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e10a493",
   "metadata": {},
   "source": [
    "Now I need to OneHotEncode our categorical data and Label Encode our target variable.  I am using the OneHotEncoder instead of the Ordinal Encoder since our categorical variables are not in order."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "57ef7ddc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#OneHotEncode our feature data\n",
    "encoder = OneHotEncoder()\n",
    "\n",
    "encoder_df = pd.DataFrame(encoder.fit_transform(SBAdf3[['NAICS_Short']]).toarray())\n",
    "\n",
    "# label_encoder for our response data. \n",
    "label_encoder = LabelEncoder()\n",
    "# Encode labels in column 'MIS_Status'. \n",
    "SBAdf3['MIS_Status']= label_encoder.fit_transform(SBAdf3['MIS_Status']) \n",
    "\n",
    "#Defining our Feature_data and Response_data and Encoded_data seperately so each can be examined\n",
    "Feature_data = encoder_df\n",
    "Response_data = pd.DataFrame(SBAdf3['MIS_Status'])\n",
    "Encoded_data = Feature_data.join(Response_data)\n",
    "Other_data = SBAdf3.filter(['Term', 'NoEmp', 'NewExist', 'CreateJob', 'RetainedJob', 'FranchiseCode', 'UrbanRural',\n",
    "                   'RevLineCr', 'LowDoc', 'DisbursementGross', 'GrAppv', 'SBA_Appv', 'RecessionYN'], axis = 1)\n",
    "\n",
    "#Review our now encoded data\n",
    "SBAdf4 = Other_data.join(Encoded_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "edbdc8db",
   "metadata": {},
   "source": [
    "Three variables, \"UrbanRural\", \"RevLineCr\", and \"LowDoc\" all have a mess of answers.  \n",
    "\n",
    "UrbanRural - This lists 1 for urban, 2 for rural and 0 for undefined.\n",
    "\n",
    "RevLineCr, LowDoc - This is supposed to be Y and N but as seen below, both contain a lot of random values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "7197c4f5",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unique values in UrbanRural [0 1 2]\n",
      "Unique values in RevLineCr ['N' '0' 'Y' 'T' nan '`' ',' '1' 'C' '3' '2' 'R' '7' 'A' '5' '.' '4' '-'\n",
      " 'Q']\n",
      "Unique values in LowDoc ['Y' 'N' 'C' '1' nan 'S' 'R' 'A' '0']\n",
      "Unique values in NewExist [ 2.  1.  0. nan]\n"
     ]
    }
   ],
   "source": [
    "#Reviewing our 4 categorical variables to see what missing values we are working with\n",
    "UniqueUR = pd.unique(SBAdf4.UrbanRural)\n",
    "UniqueRLC = pd.unique(SBAdf4.RevLineCr)\n",
    "UniqueLD = pd.unique(SBAdf4.LowDoc)\n",
    "UniqueNE = pd.unique(SBAdf4.NewExist)\n",
    "\n",
    "print(f\"Unique values in UrbanRural {UniqueUR}\")\n",
    "print(f\"Unique values in RevLineCr {UniqueRLC}\")\n",
    "print(f\"Unique values in LowDoc {UniqueLD}\")\n",
    "print(f\"Unique values in NewExist {UniqueNE}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "94064101",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Processing our 4 categorical variables to be ready for a KNN imputer\n",
    "#Urban Rural 1 and 2 are acceptable, so we will replace 0 with NaN for our imputer\n",
    "SBAdf4['UrbanRural'] = SBAdf4['UrbanRural'].replace(0, np.NaN)\n",
    "\n",
    "#For NewExisit, like Urban Rural, 1 and 2 are acceptable so we will replace 0 with NaN\n",
    "SBAdf4['NewExist'] = SBAdf4['NewExist'].replace(0, np.NaN)\n",
    "\n",
    "#Only acceptable values of RevLineCr are Y and N, the rest will be replaced with Nan\n",
    "SBAdf4['RevLineCr'] = SBAdf4['RevLineCr'].replace('0', np.NaN)\n",
    "SBAdf4['RevLineCr'] = SBAdf4['RevLineCr'].replace('T', np.NaN)\n",
    "SBAdf4['RevLineCr'] = SBAdf4['RevLineCr'].replace('`', np.NaN)\n",
    "SBAdf4['RevLineCr'] = SBAdf4['RevLineCr'].replace(',', np.NaN)\n",
    "SBAdf4['RevLineCr'] = SBAdf4['RevLineCr'].replace('1', np.NaN)\n",
    "SBAdf4['RevLineCr'] = SBAdf4['RevLineCr'].replace('C', np.NaN)\n",
    "SBAdf4['RevLineCr'] = SBAdf4['RevLineCr'].replace('3', np.NaN)\n",
    "SBAdf4['RevLineCr'] = SBAdf4['RevLineCr'].replace('2', np.NaN)\n",
    "SBAdf4['RevLineCr'] = SBAdf4['RevLineCr'].replace('R', np.NaN)\n",
    "SBAdf4['RevLineCr'] = SBAdf4['RevLineCr'].replace('7', np.NaN)\n",
    "SBAdf4['RevLineCr'] = SBAdf4['RevLineCr'].replace('A', np.NaN)\n",
    "SBAdf4['RevLineCr'] = SBAdf4['RevLineCr'].replace('5', np.NaN)\n",
    "SBAdf4['RevLineCr'] = SBAdf4['RevLineCr'].replace('.', np.NaN)\n",
    "SBAdf4['RevLineCr'] = SBAdf4['RevLineCr'].replace('4', np.NaN)\n",
    "SBAdf4['RevLineCr'] = SBAdf4['RevLineCr'].replace('-', np.NaN)\n",
    "SBAdf4['RevLineCr'] = SBAdf4['RevLineCr'].replace('Q', np.NaN)\n",
    "\n",
    "#Only acceptable values for LowDoc are Y and N, the rest will be replaced with NaN\n",
    "SBAdf4['LowDoc'] = SBAdf4['LowDoc'].replace('C', np.NaN)\n",
    "SBAdf4['LowDoc'] = SBAdf4['LowDoc'].replace('1', np.NaN)\n",
    "SBAdf4['LowDoc'] = SBAdf4['LowDoc'].replace('S', np.NaN)\n",
    "SBAdf4['LowDoc'] = SBAdf4['LowDoc'].replace('R', np.NaN)\n",
    "SBAdf4['LowDoc'] = SBAdf4['LowDoc'].replace('A', np.NaN)\n",
    "SBAdf4['LowDoc'] = SBAdf4['LowDoc'].replace('0', np.NaN)\n",
    "\n",
    "#Encode our Y and N to 0 and  1 for LowDoc and RevLineCr\n",
    "SBAdf4['LowDoc'] = SBAdf4['LowDoc'].replace('Y', 1)\n",
    "SBAdf4['LowDoc'] = SBAdf4['LowDoc'].replace('N', 0)\n",
    "SBAdf4['RevLineCr'] = SBAdf4['RevLineCr'].replace('Y', 1)\n",
    "SBAdf4['RevLineCr'] = SBAdf4['RevLineCr'].replace('N', 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "e7f4b411",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unique values in UrbanRural [nan  1.  2.]\n",
      "Unique values in RevLineCr [ 0. nan  1.]\n",
      "Unique values in LowDoc [ 1.  0. nan]\n",
      "Unique values in NewExist [ 2.  1. nan]\n"
     ]
    }
   ],
   "source": [
    "#Ensure we simplified all of our values into acceptable values or NaN\n",
    "UniqueUR = pd.unique(SBAdf4.UrbanRural)\n",
    "UniqueRLC = pd.unique(SBAdf4.RevLineCr)\n",
    "UniqueLD = pd.unique(SBAdf4.LowDoc)\n",
    "UniqueNE = pd.unique(SBAdf4.NewExist)\n",
    "\n",
    "print(f\"Unique values in UrbanRural {UniqueUR}\")\n",
    "print(f\"Unique values in RevLineCr {UniqueRLC}\")\n",
    "print(f\"Unique values in LowDoc {UniqueLD}\")\n",
    "print(f\"Unique values in NewExist {UniqueNE}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "3a298aca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>UrbanRural</th>\n",
       "      <th>NewExist</th>\n",
       "      <th>RevLineCr</th>\n",
       "      <th>LowDoc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899159</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899160</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899161</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899162</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899163</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>899164 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        UrbanRural  NewExist  RevLineCr  LowDoc\n",
       "0              NaN       2.0        0.0     1.0\n",
       "1              NaN       2.0        0.0     1.0\n",
       "2              NaN       1.0        0.0     0.0\n",
       "3              NaN       1.0        0.0     1.0\n",
       "4              NaN       1.0        0.0     0.0\n",
       "...            ...       ...        ...     ...\n",
       "899159         NaN       1.0        NaN     0.0\n",
       "899160         NaN       1.0        1.0     0.0\n",
       "899161         NaN       1.0        0.0     0.0\n",
       "899162         NaN       1.0        0.0     1.0\n",
       "899163         NaN       2.0        0.0     0.0\n",
       "\n",
       "[899164 rows x 4 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Gather our data for KNN Impute\n",
    "BeforeImpute = SBAdf4.filter(['UrbanRural', 'NewExist', 'RevLineCr', 'LowDoc'], axis = 1)\n",
    "BeforeImpute"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ed0e0ebe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 2., 0., 1.],\n",
       "       [1., 2., 0., 1.],\n",
       "       [1., 1., 0., 0.],\n",
       "       ...,\n",
       "       [1., 1., 0., 0.],\n",
       "       [2., 1., 0., 1.],\n",
       "       [1., 2., 0., 0.]])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Run KNN Imputer\n",
    "imputer = KNNImputer(n_neighbors=3)\n",
    "AfterImpute = imputer.fit_transform(BeforeImpute)\n",
    "AfterImpute"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "3c40d924",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>UrbanRural</th>\n",
       "      <th>NewExist</th>\n",
       "      <th>RevLineCr</th>\n",
       "      <th>LowDoc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899159</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899160</th>\n",
       "      <td>1.333333</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899161</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899162</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899163</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>899164 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        UrbanRural  NewExist  RevLineCr  LowDoc\n",
       "0         1.000000       2.0        0.0     1.0\n",
       "1         1.000000       2.0        0.0     1.0\n",
       "2         1.000000       1.0        0.0     0.0\n",
       "3         2.000000       1.0        0.0     1.0\n",
       "4         1.000000       1.0        0.0     0.0\n",
       "...            ...       ...        ...     ...\n",
       "899159    1.000000       1.0        0.0     0.0\n",
       "899160    1.333333       1.0        1.0     0.0\n",
       "899161    1.000000       1.0        0.0     0.0\n",
       "899162    2.000000       1.0        0.0     1.0\n",
       "899163    1.000000       2.0        0.0     0.0\n",
       "\n",
       "[899164 rows x 4 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Create our After Impute dataframe as AIdf and prepare to combine\n",
    "AIdf = pd.DataFrame(AfterImpute)\n",
    "AIdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "2e81f0db",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unique values in UrbanRural [1.         2.         1.33333333 1.66666667]\n",
      "Unique values in RevLineCr [0. 1.]\n",
      "Unique values in LowDoc [1.         0.         0.33333333 0.66666667]\n",
      "Unique values in NewExist [2.         1.         1.66666667 1.33333333]\n"
     ]
    }
   ],
   "source": [
    "#Second verfication that we only have acceptable values\n",
    "UniqueUR = pd.unique(AIdf.UrbanRural)\n",
    "UniqueRLC = pd.unique(AIdf.RevLineCr)\n",
    "UniqueLD = pd.unique(AIdf.LowDoc)\n",
    "UniqueNE = pd.unique(AIdf.NewExist)\n",
    "\n",
    "print(f\"Unique values in UrbanRural {UniqueUR}\")\n",
    "print(f\"Unique values in RevLineCr {UniqueRLC}\")\n",
    "print(f\"Unique values in LowDoc {UniqueLD}\")\n",
    "print(f\"Unique values in NewExist {UniqueNE}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "da218735",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Term</th>\n",
       "      <th>NoEmp</th>\n",
       "      <th>CreateJob</th>\n",
       "      <th>RetainedJob</th>\n",
       "      <th>FranchiseCode</th>\n",
       "      <th>DisbursementGross</th>\n",
       "      <th>GrAppv</th>\n",
       "      <th>SBA_Appv</th>\n",
       "      <th>RecessionYN</th>\n",
       "      <th>0</th>\n",
       "      <th>...</th>\n",
       "      <th>20</th>\n",
       "      <th>21</th>\n",
       "      <th>22</th>\n",
       "      <th>23</th>\n",
       "      <th>24</th>\n",
       "      <th>MIS_Status</th>\n",
       "      <th>UrbanRural</th>\n",
       "      <th>NewExist</th>\n",
       "      <th>RevLineCr</th>\n",
       "      <th>LowDoc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>84</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>60000.0</td>\n",
       "      <td>60000.0</td>\n",
       "      <td>60000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>60</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40000.0</td>\n",
       "      <td>40000.0</td>\n",
       "      <td>40000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>180</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>287000.0</td>\n",
       "      <td>287000.0</td>\n",
       "      <td>287000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>60</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>35000.0</td>\n",
       "      <td>35000.0</td>\n",
       "      <td>35000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>240</td>\n",
       "      <td>14</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>229000.0</td>\n",
       "      <td>229000.0</td>\n",
       "      <td>229000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899159</th>\n",
       "      <td>60</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>70000.0</td>\n",
       "      <td>70000.0</td>\n",
       "      <td>70000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899160</th>\n",
       "      <td>60</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>85000.0</td>\n",
       "      <td>85000.0</td>\n",
       "      <td>85000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899161</th>\n",
       "      <td>108</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>300000.0</td>\n",
       "      <td>300000.0</td>\n",
       "      <td>300000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899162</th>\n",
       "      <td>60</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>75000.0</td>\n",
       "      <td>75000.0</td>\n",
       "      <td>75000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899163</th>\n",
       "      <td>48</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30000.0</td>\n",
       "      <td>30000.0</td>\n",
       "      <td>30000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>899164 rows × 39 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Term  NoEmp  CreateJob  RetainedJob  FranchiseCode  DisbursementGross  \\\n",
       "0         84      4          0            0              0            60000.0   \n",
       "1         60      2          0            0              0            40000.0   \n",
       "2        180      7          0            0              0           287000.0   \n",
       "3         60      2          0            0              0            35000.0   \n",
       "4        240     14          7            7              0           229000.0   \n",
       "...      ...    ...        ...          ...            ...                ...   \n",
       "899159    60      6          0            0              0            70000.0   \n",
       "899160    60      6          0            0              0            85000.0   \n",
       "899161   108     26          0            0              0           300000.0   \n",
       "899162    60      6          0            0              0            75000.0   \n",
       "899163    48      1          0            0              0            30000.0   \n",
       "\n",
       "          GrAppv  SBA_Appv  RecessionYN    0  ...   20   21   22   23   24  \\\n",
       "0        60000.0   60000.0            0  0.0  ...  0.0  0.0  0.0  0.0  0.0   \n",
       "1        40000.0   40000.0            0  0.0  ...  0.0  0.0  1.0  0.0  0.0   \n",
       "2       287000.0  287000.0            0  0.0  ...  1.0  0.0  0.0  0.0  0.0   \n",
       "3        35000.0   35000.0            0  1.0  ...  0.0  0.0  0.0  0.0  0.0   \n",
       "4       229000.0  229000.0            0  1.0  ...  0.0  0.0  0.0  0.0  0.0   \n",
       "...          ...       ...          ...  ...  ...  ...  ...  ...  ...  ...   \n",
       "899159   70000.0   70000.0            0  0.0  ...  0.0  0.0  0.0  0.0  0.0   \n",
       "899160   85000.0   85000.0            0  0.0  ...  0.0  0.0  0.0  0.0  0.0   \n",
       "899161  300000.0  300000.0            0  0.0  ...  0.0  0.0  0.0  0.0  0.0   \n",
       "899162   75000.0   75000.0            0  1.0  ...  0.0  0.0  0.0  0.0  0.0   \n",
       "899163   30000.0   30000.0            0  1.0  ...  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "        MIS_Status  UrbanRural  NewExist  RevLineCr  LowDoc  \n",
       "0                1    1.000000       2.0        0.0     1.0  \n",
       "1                1    1.000000       2.0        0.0     1.0  \n",
       "2                1    1.000000       1.0        0.0     0.0  \n",
       "3                1    2.000000       1.0        0.0     1.0  \n",
       "4                1    1.000000       1.0        0.0     0.0  \n",
       "...            ...         ...       ...        ...     ...  \n",
       "899159           1    1.000000       1.0        0.0     0.0  \n",
       "899160           1    1.333333       1.0        1.0     0.0  \n",
       "899161           1    1.000000       1.0        0.0     0.0  \n",
       "899162           0    2.000000       1.0        0.0     1.0  \n",
       "899163           1    1.000000       2.0        0.0     0.0  \n",
       "\n",
       "[899164 rows x 39 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Bring our imputed data back into our master dataframe\n",
    "SBAdf4 = SBAdf4.drop(['UrbanRural', 'NewExist', 'RevLineCr', 'LowDoc'], axis = 1)\n",
    "SBAdf5 = SBAdf4.join(AIdf)\n",
    "SBAdf5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "bed5b4cc",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#Scaling our continous variables\n",
    "continuous = SBAdf5.filter(['Term', 'NoEmp', 'DisbursementGross', 'GrAppv', 'SBA_Appv'])\n",
    "scaler = StandardScaler()\n",
    "continous_scaled = scaler.fit_transform(continuous)\n",
    "continous_scaled = pd.DataFrame(continous_scaled)\n",
    "continous_scaled.columns = (['Term', 'NoEmp', 'DisbursementGross', 'GrAppv', 'SBA_Appv'])\n",
    "nocont = SBAdf5.drop(['Term', 'NoEmp', 'DisbursementGross', 'GrAppv', 'SBA_Appv'], axis = 1)\n",
    "SBAdf5 = nocont.join(continous_scaled)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e3daf8d",
   "metadata": {},
   "source": [
    "# Selecting The Most Relevant Variables"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "056c447c",
   "metadata": {},
   "source": [
    "We will be using MIS_Status as our target variable. This variable ends in two possible outcomes: PIF for Paid in Full and CHGOFF for Charged-Off for loans that have defaulted.  The rest of the variables selected will be the features.  Below, we are going to check the correlation between each feature and our target to decide which are worth keeping and which will be eliminated."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "faab5eca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CreateJob              int64\n",
       "RetainedJob            int64\n",
       "FranchiseCode          int64\n",
       "RecessionYN            int32\n",
       "0                    float64\n",
       "1                    float64\n",
       "2                    float64\n",
       "3                    float64\n",
       "4                    float64\n",
       "5                    float64\n",
       "6                    float64\n",
       "7                    float64\n",
       "8                    float64\n",
       "9                    float64\n",
       "10                   float64\n",
       "11                   float64\n",
       "12                   float64\n",
       "13                   float64\n",
       "14                   float64\n",
       "15                   float64\n",
       "16                   float64\n",
       "17                   float64\n",
       "18                   float64\n",
       "19                   float64\n",
       "20                   float64\n",
       "21                   float64\n",
       "22                   float64\n",
       "23                   float64\n",
       "24                   float64\n",
       "MIS_Status             int32\n",
       "UrbanRural           float64\n",
       "NewExist             float64\n",
       "RevLineCr            float64\n",
       "LowDoc               float64\n",
       "Term                 float64\n",
       "NoEmp                float64\n",
       "DisbursementGross    float64\n",
       "GrAppv               float64\n",
       "SBA_Appv             float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Verify our data types to ensure everything is ready for our correlation test\n",
    "SBAdf5.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5f852c32",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "#T_62734_row0_col0,#T_62734_row1_col1,#T_62734_row2_col2,#T_62734_row3_col3,#T_62734_row4_col4,#T_62734_row4_col6,#T_62734_row5_col5,#T_62734_row6_col4,#T_62734_row6_col6,#T_62734_row7_col7,#T_62734_row8_col8,#T_62734_row9_col9,#T_62734_row10_col10,#T_62734_row11_col11,#T_62734_row12_col12{\n",
       "            background-color:  #08306b;\n",
       "            color:  #f1f1f1;\n",
       "        }#T_62734_row0_col1{\n",
       "            background-color:  #abd0e6;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row0_col2,#T_62734_row3_col2{\n",
       "            background-color:  #eef5fc;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row0_col3{\n",
       "            background-color:  #dce9f6;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row0_col4,#T_62734_row0_col6{\n",
       "            background-color:  #cde0f1;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row0_col5{\n",
       "            background-color:  #c1d9ed;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row0_col7,#T_62734_row1_col8,#T_62734_row1_col10,#T_62734_row8_col0,#T_62734_row8_col1,#T_62734_row8_col3,#T_62734_row8_col4,#T_62734_row8_col5,#T_62734_row8_col6,#T_62734_row8_col9,#T_62734_row8_col11,#T_62734_row8_col12,#T_62734_row11_col2{\n",
       "            background-color:  #f7fbff;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row0_col8{\n",
       "            background-color:  #ddeaf7;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row0_col9{\n",
       "            background-color:  #c3daee;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row0_col10,#T_62734_row1_col3,#T_62734_row4_col2,#T_62734_row6_col2,#T_62734_row7_col12,#T_62734_row10_col9{\n",
       "            background-color:  #dfebf7;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row0_col11,#T_62734_row5_col12,#T_62734_row9_col7{\n",
       "            background-color:  #f1f7fd;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row0_col12{\n",
       "            background-color:  #aed1e7;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row1_col0,#T_62734_row7_col1{\n",
       "            background-color:  #caddf0;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row1_col2{\n",
       "            background-color:  #e7f0fa;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row1_col4,#T_62734_row1_col6{\n",
       "            background-color:  #5ba3d0;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row1_col5{\n",
       "            background-color:  #4997c9;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row1_col7,#T_62734_row7_col9,#T_62734_row8_col10{\n",
       "            background-color:  #edf4fc;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row1_col9{\n",
       "            background-color:  #9fcae1;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row1_col11,#T_62734_row5_col10{\n",
       "            background-color:  #f5fafe;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row1_col12,#T_62734_row4_col7,#T_62734_row5_col7,#T_62734_row6_col7,#T_62734_row11_col9{\n",
       "            background-color:  #e7f1fa;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row2_col0,#T_62734_row10_col5,#T_62734_row11_col5{\n",
       "            background-color:  #dae8f6;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row2_col1{\n",
       "            background-color:  #bad6eb;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row2_col3,#T_62734_row7_col11,#T_62734_row10_col4,#T_62734_row10_col6,#T_62734_row11_col7{\n",
       "            background-color:  #e4eff9;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row2_col4,#T_62734_row2_col6,#T_62734_row12_col11{\n",
       "            background-color:  #cadef0;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row2_col5,#T_62734_row3_col5{\n",
       "            background-color:  #bfd8ed;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row2_col7,#T_62734_row3_col7{\n",
       "            background-color:  #e9f2fa;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row2_col8{\n",
       "            background-color:  #cbdef1;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row2_col9{\n",
       "            background-color:  #dfecf7;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row2_col10,#T_62734_row9_col11{\n",
       "            background-color:  #ecf4fb;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row2_col11,#T_62734_row7_col2,#T_62734_row10_col11,#T_62734_row11_col10{\n",
       "            background-color:  #f0f6fd;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row2_col12{\n",
       "            background-color:  #d9e8f5;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row3_col0,#T_62734_row10_col0{\n",
       "            background-color:  #d3e3f3;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row3_col1{\n",
       "            background-color:  #bdd7ec;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row3_col4,#T_62734_row3_col6,#T_62734_row11_col3{\n",
       "            background-color:  #ccdff1;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row3_col8{\n",
       "            background-color:  #d4e4f4;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row3_col9{\n",
       "            background-color:  #e1edf8;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row3_col10{\n",
       "            background-color:  #ebf3fb;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row3_col11,#T_62734_row5_col0{\n",
       "            background-color:  #cee0f2;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row3_col12,#T_62734_row4_col9,#T_62734_row6_col9{\n",
       "            background-color:  #d1e2f3;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row4_col0,#T_62734_row6_col0,#T_62734_row11_col1{\n",
       "            background-color:  #d0e2f2;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row4_col1,#T_62734_row6_col1{\n",
       "            background-color:  #4a98c9;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row4_col3,#T_62734_row6_col3{\n",
       "            background-color:  #d7e6f5;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row4_col5,#T_62734_row6_col5{\n",
       "            background-color:  #083573;\n",
       "            color:  #f1f1f1;\n",
       "        }#T_62734_row4_col8,#T_62734_row6_col8,#T_62734_row12_col3{\n",
       "            background-color:  #e0ecf8;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row4_col10,#T_62734_row5_col11,#T_62734_row6_col10{\n",
       "            background-color:  #f5f9fe;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row4_col11,#T_62734_row6_col11,#T_62734_row8_col2,#T_62734_row12_col4,#T_62734_row12_col6{\n",
       "            background-color:  #f6faff;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row4_col12,#T_62734_row6_col12,#T_62734_row12_col7{\n",
       "            background-color:  #f2f8fd;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row5_col1{\n",
       "            background-color:  #4191c6;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row5_col2{\n",
       "            background-color:  #deebf7;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row5_col3,#T_62734_row9_col8,#T_62734_row12_col1,#T_62734_row12_col9{\n",
       "            background-color:  #d6e5f4;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row5_col4,#T_62734_row5_col6{\n",
       "            background-color:  #083674;\n",
       "            color:  #f1f1f1;\n",
       "        }#T_62734_row5_col8,#T_62734_row7_col10,#T_62734_row9_col2{\n",
       "            background-color:  #eaf3fb;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row5_col9,#T_62734_row7_col5{\n",
       "            background-color:  #d0e1f2;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row7_col0,#T_62734_row10_col7,#T_62734_row12_col5{\n",
       "            background-color:  #eaf2fb;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row7_col3,#T_62734_row11_col4,#T_62734_row11_col6{\n",
       "            background-color:  #e6f0f9;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row7_col4,#T_62734_row7_col6{\n",
       "            background-color:  #d8e7f5;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row7_col8{\n",
       "            background-color:  #bed8ec;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row8_col7,#T_62734_row9_col3,#T_62734_row9_col10{\n",
       "            background-color:  #e3eef8;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row9_col0{\n",
       "            background-color:  #b8d5ea;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row9_col1{\n",
       "            background-color:  #72b2d8;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row9_col4,#T_62734_row9_col6{\n",
       "            background-color:  #c8dcf0;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row9_col5{\n",
       "            background-color:  #b9d6ea;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row9_col12,#T_62734_row10_col8{\n",
       "            background-color:  #c9ddf0;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row10_col1,#T_62734_row11_col8{\n",
       "            background-color:  #d2e3f3;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row10_col2{\n",
       "            background-color:  #f3f8fe;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row10_col3{\n",
       "            background-color:  #e8f1fa;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row10_col12{\n",
       "            background-color:  #85bcdc;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row11_col0,#T_62734_row12_col8{\n",
       "            background-color:  #e3eef9;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row11_col12{\n",
       "            background-color:  #b4d3e9;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row12_col0{\n",
       "            background-color:  #b5d4e9;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row12_col2{\n",
       "            background-color:  #f4f9fe;\n",
       "            color:  #000000;\n",
       "        }#T_62734_row12_col10{\n",
       "            background-color:  #a0cbe2;\n",
       "            color:  #000000;\n",
       "        }</style><table id=\"T_62734_\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >Unnamed: 0</th>        <th class=\"col_heading level0 col1\" >Term</th>        <th class=\"col_heading level0 col2\" >NoEmp</th>        <th class=\"col_heading level0 col3\" >FranchiseCode</th>        <th class=\"col_heading level0 col4\" >DisbursementGross</th>        <th class=\"col_heading level0 col5\" >GrAppv</th>        <th class=\"col_heading level0 col6\" >SBA_Appv</th>        <th class=\"col_heading level0 col7\" >RecessionYN</th>        <th class=\"col_heading level0 col8\" >RevLineCr</th>        <th class=\"col_heading level0 col9\" >MIS_Status</th>        <th class=\"col_heading level0 col10\" >UrbanRural</th>        <th class=\"col_heading level0 col11\" >NewExist</th>        <th class=\"col_heading level0 col12\" >LowDoc</th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_62734_level0_row0\" class=\"row_heading level0 row0\" >Unnamed: 0</th>\n",
       "                        <td id=\"T_62734_row0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
       "                        <td id=\"T_62734_row0_col1\" class=\"data row0 col1\" >0.110847</td>\n",
       "                        <td id=\"T_62734_row0_col2\" class=\"data row0 col2\" >0.011346</td>\n",
       "                        <td id=\"T_62734_row0_col3\" class=\"data row0 col3\" >0.054213</td>\n",
       "                        <td id=\"T_62734_row0_col4\" class=\"data row0 col4\" >0.070392</td>\n",
       "                        <td id=\"T_62734_row0_col5\" class=\"data row0 col5\" >0.083208</td>\n",
       "                        <td id=\"T_62734_row0_col6\" class=\"data row0 col6\" >0.070392</td>\n",
       "                        <td id=\"T_62734_row0_col7\" class=\"data row0 col7\" >-0.082273</td>\n",
       "                        <td id=\"T_62734_row0_col8\" class=\"data row0 col8\" >-0.160000</td>\n",
       "                        <td id=\"T_62734_row0_col9\" class=\"data row0 col9\" >0.180063</td>\n",
       "                        <td id=\"T_62734_row0_col10\" class=\"data row0 col10\" >0.053243</td>\n",
       "                        <td id=\"T_62734_row0_col11\" class=\"data row0 col11\" >-0.045932</td>\n",
       "                        <td id=\"T_62734_row0_col12\" class=\"data row0 col12\" >0.189514</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_62734_level0_row1\" class=\"row_heading level0 row1\" >Term</th>\n",
       "                        <td id=\"T_62734_row1_col0\" class=\"data row1 col0\" >0.110847</td>\n",
       "                        <td id=\"T_62734_row1_col1\" class=\"data row1 col1\" >1.000000</td>\n",
       "                        <td id=\"T_62734_row1_col2\" class=\"data row1 col2\" >0.046140</td>\n",
       "                        <td id=\"T_62734_row1_col3\" class=\"data row1 col3\" >0.038391</td>\n",
       "                        <td id=\"T_62734_row1_col4\" class=\"data row1 col4\" >0.466391</td>\n",
       "                        <td id=\"T_62734_row1_col5\" class=\"data row1 col5\" >0.502610</td>\n",
       "                        <td id=\"T_62734_row1_col6\" class=\"data row1 col6\" >0.466391</td>\n",
       "                        <td id=\"T_62734_row1_col7\" class=\"data row1 col7\" >-0.025499</td>\n",
       "                        <td id=\"T_62734_row1_col8\" class=\"data row1 col8\" >-0.335331</td>\n",
       "                        <td id=\"T_62734_row1_col9\" class=\"data row1 col9\" >0.307745</td>\n",
       "                        <td id=\"T_62734_row1_col10\" class=\"data row1 col10\" >-0.079810</td>\n",
       "                        <td id=\"T_62734_row1_col11\" class=\"data row1 col11\" >-0.072494</td>\n",
       "                        <td id=\"T_62734_row1_col12\" class=\"data row1 col12\" >-0.108677</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_62734_level0_row2\" class=\"row_heading level0 row2\" >NoEmp</th>\n",
       "                        <td id=\"T_62734_row2_col0\" class=\"data row2 col0\" >0.011346</td>\n",
       "                        <td id=\"T_62734_row2_col1\" class=\"data row2 col1\" >0.046140</td>\n",
       "                        <td id=\"T_62734_row2_col2\" class=\"data row2 col2\" >1.000000</td>\n",
       "                        <td id=\"T_62734_row2_col3\" class=\"data row2 col3\" >0.007385</td>\n",
       "                        <td id=\"T_62734_row2_col4\" class=\"data row2 col4\" >0.088651</td>\n",
       "                        <td id=\"T_62734_row2_col5\" class=\"data row2 col5\" >0.090430</td>\n",
       "                        <td id=\"T_62734_row2_col6\" class=\"data row2 col6\" >0.088651</td>\n",
       "                        <td id=\"T_62734_row2_col7\" class=\"data row2 col7\" >-0.002880</td>\n",
       "                        <td id=\"T_62734_row2_col8\" class=\"data row2 col8\" >-0.032915</td>\n",
       "                        <td id=\"T_62734_row2_col9\" class=\"data row2 col9\" >0.025802</td>\n",
       "                        <td id=\"T_62734_row2_col10\" class=\"data row2 col10\" >-0.017598</td>\n",
       "                        <td id=\"T_62734_row2_col11\" class=\"data row2 col11\" >-0.040048</td>\n",
       "                        <td id=\"T_62734_row2_col12\" class=\"data row2 col12\" >-0.022464</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_62734_level0_row3\" class=\"row_heading level0 row3\" >FranchiseCode</th>\n",
       "                        <td id=\"T_62734_row3_col0\" class=\"data row3 col0\" >0.054213</td>\n",
       "                        <td id=\"T_62734_row3_col1\" class=\"data row3 col1\" >0.038391</td>\n",
       "                        <td id=\"T_62734_row3_col2\" class=\"data row3 col2\" >0.007385</td>\n",
       "                        <td id=\"T_62734_row3_col3\" class=\"data row3 col3\" >1.000000</td>\n",
       "                        <td id=\"T_62734_row3_col4\" class=\"data row3 col4\" >0.079022</td>\n",
       "                        <td id=\"T_62734_row3_col5\" class=\"data row3 col5\" >0.088967</td>\n",
       "                        <td id=\"T_62734_row3_col6\" class=\"data row3 col6\" >0.079022</td>\n",
       "                        <td id=\"T_62734_row3_col7\" class=\"data row3 col7\" >-0.003111</td>\n",
       "                        <td id=\"T_62734_row3_col8\" class=\"data row3 col8\" >-0.098916</td>\n",
       "                        <td id=\"T_62734_row3_col9\" class=\"data row3 col9\" >0.014188</td>\n",
       "                        <td id=\"T_62734_row3_col10\" class=\"data row3 col10\" >-0.014146</td>\n",
       "                        <td id=\"T_62734_row3_col11\" class=\"data row3 col11\" >0.142210</td>\n",
       "                        <td id=\"T_62734_row3_col12\" class=\"data row3 col12\" >0.028401</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_62734_level0_row4\" class=\"row_heading level0 row4\" >DisbursementGross</th>\n",
       "                        <td id=\"T_62734_row4_col0\" class=\"data row4 col0\" >0.070392</td>\n",
       "                        <td id=\"T_62734_row4_col1\" class=\"data row4 col1\" >0.466391</td>\n",
       "                        <td id=\"T_62734_row4_col2\" class=\"data row4 col2\" >0.088651</td>\n",
       "                        <td id=\"T_62734_row4_col3\" class=\"data row4 col3\" >0.079022</td>\n",
       "                        <td id=\"T_62734_row4_col4\" class=\"data row4 col4\" >1.000000</td>\n",
       "                        <td id=\"T_62734_row4_col5\" class=\"data row4 col5\" >0.971242</td>\n",
       "                        <td id=\"T_62734_row4_col6\" class=\"data row4 col6\" >1.000000</td>\n",
       "                        <td id=\"T_62734_row4_col7\" class=\"data row4 col7\" >0.005789</td>\n",
       "                        <td id=\"T_62734_row4_col8\" class=\"data row4 col8\" >-0.179223</td>\n",
       "                        <td id=\"T_62734_row4_col9\" class=\"data row4 col9\" >0.104869</td>\n",
       "                        <td id=\"T_62734_row4_col10\" class=\"data row4 col10\" >-0.064504</td>\n",
       "                        <td id=\"T_62734_row4_col11\" class=\"data row4 col11\" >-0.073748</td>\n",
       "                        <td id=\"T_62734_row4_col12\" class=\"data row4 col12\" >-0.173250</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_62734_level0_row5\" class=\"row_heading level0 row5\" >GrAppv</th>\n",
       "                        <td id=\"T_62734_row5_col0\" class=\"data row5 col0\" >0.083208</td>\n",
       "                        <td id=\"T_62734_row5_col1\" class=\"data row5 col1\" >0.502610</td>\n",
       "                        <td id=\"T_62734_row5_col2\" class=\"data row5 col2\" >0.090430</td>\n",
       "                        <td id=\"T_62734_row5_col3\" class=\"data row5 col3\" >0.088967</td>\n",
       "                        <td id=\"T_62734_row5_col4\" class=\"data row5 col4\" >0.971242</td>\n",
       "                        <td id=\"T_62734_row5_col5\" class=\"data row5 col5\" >1.000000</td>\n",
       "                        <td id=\"T_62734_row5_col6\" class=\"data row5 col6\" >0.971242</td>\n",
       "                        <td id=\"T_62734_row5_col7\" class=\"data row5 col7\" >0.003329</td>\n",
       "                        <td id=\"T_62734_row5_col8\" class=\"data row5 col8\" >-0.250212</td>\n",
       "                        <td id=\"T_62734_row5_col9\" class=\"data row5 col9\" >0.115089</td>\n",
       "                        <td id=\"T_62734_row5_col10\" class=\"data row5 col10\" >-0.067768</td>\n",
       "                        <td id=\"T_62734_row5_col11\" class=\"data row5 col11\" >-0.065721</td>\n",
       "                        <td id=\"T_62734_row5_col12\" class=\"data row5 col12\" >-0.163415</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_62734_level0_row6\" class=\"row_heading level0 row6\" >SBA_Appv</th>\n",
       "                        <td id=\"T_62734_row6_col0\" class=\"data row6 col0\" >0.070392</td>\n",
       "                        <td id=\"T_62734_row6_col1\" class=\"data row6 col1\" >0.466391</td>\n",
       "                        <td id=\"T_62734_row6_col2\" class=\"data row6 col2\" >0.088651</td>\n",
       "                        <td id=\"T_62734_row6_col3\" class=\"data row6 col3\" >0.079022</td>\n",
       "                        <td id=\"T_62734_row6_col4\" class=\"data row6 col4\" >1.000000</td>\n",
       "                        <td id=\"T_62734_row6_col5\" class=\"data row6 col5\" >0.971242</td>\n",
       "                        <td id=\"T_62734_row6_col6\" class=\"data row6 col6\" >1.000000</td>\n",
       "                        <td id=\"T_62734_row6_col7\" class=\"data row6 col7\" >0.005789</td>\n",
       "                        <td id=\"T_62734_row6_col8\" class=\"data row6 col8\" >-0.179223</td>\n",
       "                        <td id=\"T_62734_row6_col9\" class=\"data row6 col9\" >0.104869</td>\n",
       "                        <td id=\"T_62734_row6_col10\" class=\"data row6 col10\" >-0.064504</td>\n",
       "                        <td id=\"T_62734_row6_col11\" class=\"data row6 col11\" >-0.073748</td>\n",
       "                        <td id=\"T_62734_row6_col12\" class=\"data row6 col12\" >-0.173250</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_62734_level0_row7\" class=\"row_heading level0 row7\" >RecessionYN</th>\n",
       "                        <td id=\"T_62734_row7_col0\" class=\"data row7 col0\" >-0.082273</td>\n",
       "                        <td id=\"T_62734_row7_col1\" class=\"data row7 col1\" >-0.025499</td>\n",
       "                        <td id=\"T_62734_row7_col2\" class=\"data row7 col2\" >-0.002880</td>\n",
       "                        <td id=\"T_62734_row7_col3\" class=\"data row7 col3\" >-0.003111</td>\n",
       "                        <td id=\"T_62734_row7_col4\" class=\"data row7 col4\" >0.005789</td>\n",
       "                        <td id=\"T_62734_row7_col5\" class=\"data row7 col5\" >0.003329</td>\n",
       "                        <td id=\"T_62734_row7_col6\" class=\"data row7 col6\" >0.005789</td>\n",
       "                        <td id=\"T_62734_row7_col7\" class=\"data row7 col7\" >1.000000</td>\n",
       "                        <td id=\"T_62734_row7_col8\" class=\"data row7 col8\" >0.031125</td>\n",
       "                        <td id=\"T_62734_row7_col9\" class=\"data row7 col9\" >-0.047386</td>\n",
       "                        <td id=\"T_62734_row7_col10\" class=\"data row7 col10\" >-0.008818</td>\n",
       "                        <td id=\"T_62734_row7_col11\" class=\"data row7 col11\" >0.020267</td>\n",
       "                        <td id=\"T_62734_row7_col12\" class=\"data row7 col12\" >-0.054920</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_62734_level0_row8\" class=\"row_heading level0 row8\" >RevLineCr</th>\n",
       "                        <td id=\"T_62734_row8_col0\" class=\"data row8 col0\" >-0.160000</td>\n",
       "                        <td id=\"T_62734_row8_col1\" class=\"data row8 col1\" >-0.335331</td>\n",
       "                        <td id=\"T_62734_row8_col2\" class=\"data row8 col2\" >-0.032915</td>\n",
       "                        <td id=\"T_62734_row8_col3\" class=\"data row8 col3\" >-0.098916</td>\n",
       "                        <td id=\"T_62734_row8_col4\" class=\"data row8 col4\" >-0.179223</td>\n",
       "                        <td id=\"T_62734_row8_col5\" class=\"data row8 col5\" >-0.250212</td>\n",
       "                        <td id=\"T_62734_row8_col6\" class=\"data row8 col6\" >-0.179223</td>\n",
       "                        <td id=\"T_62734_row8_col7\" class=\"data row8 col7\" >0.031125</td>\n",
       "                        <td id=\"T_62734_row8_col8\" class=\"data row8 col8\" >1.000000</td>\n",
       "                        <td id=\"T_62734_row8_col9\" class=\"data row8 col9\" >-0.107029</td>\n",
       "                        <td id=\"T_62734_row8_col10\" class=\"data row8 col10\" >-0.021647</td>\n",
       "                        <td id=\"T_62734_row8_col11\" class=\"data row8 col11\" >-0.082124</td>\n",
       "                        <td id=\"T_62734_row8_col12\" class=\"data row8 col12\" >-0.204077</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_62734_level0_row9\" class=\"row_heading level0 row9\" >MIS_Status</th>\n",
       "                        <td id=\"T_62734_row9_col0\" class=\"data row9 col0\" >0.180063</td>\n",
       "                        <td id=\"T_62734_row9_col1\" class=\"data row9 col1\" >0.307745</td>\n",
       "                        <td id=\"T_62734_row9_col2\" class=\"data row9 col2\" >0.025802</td>\n",
       "                        <td id=\"T_62734_row9_col3\" class=\"data row9 col3\" >0.014188</td>\n",
       "                        <td id=\"T_62734_row9_col4\" class=\"data row9 col4\" >0.104869</td>\n",
       "                        <td id=\"T_62734_row9_col5\" class=\"data row9 col5\" >0.115089</td>\n",
       "                        <td id=\"T_62734_row9_col6\" class=\"data row9 col6\" >0.104869</td>\n",
       "                        <td id=\"T_62734_row9_col7\" class=\"data row9 col7\" >-0.047386</td>\n",
       "                        <td id=\"T_62734_row9_col8\" class=\"data row9 col8\" >-0.107029</td>\n",
       "                        <td id=\"T_62734_row9_col9\" class=\"data row9 col9\" >1.000000</td>\n",
       "                        <td id=\"T_62734_row9_col10\" class=\"data row9 col10\" >0.030871</td>\n",
       "                        <td id=\"T_62734_row9_col11\" class=\"data row9 col11\" >-0.019304</td>\n",
       "                        <td id=\"T_62734_row9_col12\" class=\"data row9 col12\" >0.080023</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_62734_level0_row10\" class=\"row_heading level0 row10\" >UrbanRural</th>\n",
       "                        <td id=\"T_62734_row10_col0\" class=\"data row10 col0\" >0.053243</td>\n",
       "                        <td id=\"T_62734_row10_col1\" class=\"data row10 col1\" >-0.079810</td>\n",
       "                        <td id=\"T_62734_row10_col2\" class=\"data row10 col2\" >-0.017598</td>\n",
       "                        <td id=\"T_62734_row10_col3\" class=\"data row10 col3\" >-0.014146</td>\n",
       "                        <td id=\"T_62734_row10_col4\" class=\"data row10 col4\" >-0.064504</td>\n",
       "                        <td id=\"T_62734_row10_col5\" class=\"data row10 col5\" >-0.067768</td>\n",
       "                        <td id=\"T_62734_row10_col6\" class=\"data row10 col6\" >-0.064504</td>\n",
       "                        <td id=\"T_62734_row10_col7\" class=\"data row10 col7\" >-0.008818</td>\n",
       "                        <td id=\"T_62734_row10_col8\" class=\"data row10 col8\" >-0.021647</td>\n",
       "                        <td id=\"T_62734_row10_col9\" class=\"data row10 col9\" >0.030871</td>\n",
       "                        <td id=\"T_62734_row10_col10\" class=\"data row10 col10\" >1.000000</td>\n",
       "                        <td id=\"T_62734_row10_col11\" class=\"data row10 col11\" >-0.040680</td>\n",
       "                        <td id=\"T_62734_row10_col12\" class=\"data row10 col12\" >0.319819</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_62734_level0_row11\" class=\"row_heading level0 row11\" >NewExist</th>\n",
       "                        <td id=\"T_62734_row11_col0\" class=\"data row11 col0\" >-0.045932</td>\n",
       "                        <td id=\"T_62734_row11_col1\" class=\"data row11 col1\" >-0.072494</td>\n",
       "                        <td id=\"T_62734_row11_col2\" class=\"data row11 col2\" >-0.040048</td>\n",
       "                        <td id=\"T_62734_row11_col3\" class=\"data row11 col3\" >0.142210</td>\n",
       "                        <td id=\"T_62734_row11_col4\" class=\"data row11 col4\" >-0.073748</td>\n",
       "                        <td id=\"T_62734_row11_col5\" class=\"data row11 col5\" >-0.065721</td>\n",
       "                        <td id=\"T_62734_row11_col6\" class=\"data row11 col6\" >-0.073748</td>\n",
       "                        <td id=\"T_62734_row11_col7\" class=\"data row11 col7\" >0.020267</td>\n",
       "                        <td id=\"T_62734_row11_col8\" class=\"data row11 col8\" >-0.082124</td>\n",
       "                        <td id=\"T_62734_row11_col9\" class=\"data row11 col9\" >-0.019304</td>\n",
       "                        <td id=\"T_62734_row11_col10\" class=\"data row11 col10\" >-0.040680</td>\n",
       "                        <td id=\"T_62734_row11_col11\" class=\"data row11 col11\" >1.000000</td>\n",
       "                        <td id=\"T_62734_row11_col12\" class=\"data row11 col12\" >0.165978</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_62734_level0_row12\" class=\"row_heading level0 row12\" >LowDoc</th>\n",
       "                        <td id=\"T_62734_row12_col0\" class=\"data row12 col0\" >0.189514</td>\n",
       "                        <td id=\"T_62734_row12_col1\" class=\"data row12 col1\" >-0.108677</td>\n",
       "                        <td id=\"T_62734_row12_col2\" class=\"data row12 col2\" >-0.022464</td>\n",
       "                        <td id=\"T_62734_row12_col3\" class=\"data row12 col3\" >0.028401</td>\n",
       "                        <td id=\"T_62734_row12_col4\" class=\"data row12 col4\" >-0.173250</td>\n",
       "                        <td id=\"T_62734_row12_col5\" class=\"data row12 col5\" >-0.163415</td>\n",
       "                        <td id=\"T_62734_row12_col6\" class=\"data row12 col6\" >-0.173250</td>\n",
       "                        <td id=\"T_62734_row12_col7\" class=\"data row12 col7\" >-0.054920</td>\n",
       "                        <td id=\"T_62734_row12_col8\" class=\"data row12 col8\" >-0.204077</td>\n",
       "                        <td id=\"T_62734_row12_col9\" class=\"data row12 col9\" >0.080023</td>\n",
       "                        <td id=\"T_62734_row12_col10\" class=\"data row12 col10\" >0.319819</td>\n",
       "                        <td id=\"T_62734_row12_col11\" class=\"data row12 col11\" >0.165978</td>\n",
       "                        <td id=\"T_62734_row12_col12\" class=\"data row12 col12\" >1.000000</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x1ecd09bfa90>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Examine our correlations to see if any other variables can be dropped\n",
    "SBAdf5.corr().style.background_gradient(cmap=\"Blues\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d14780d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Dropping 'CreateJob' and 'RetainedJob' for having little to no correlation to MIS_Status \n",
    "#dropping as well our NAICS variables since most are not strongly coordinated and the list of industries is not comprehensive\n",
    "SBAdf5 = SBAdf5.filter(['Term', 'NoEmp', 'FranchiseCode', 'DisbursementGross', 'GrAppv', 'SBA_Appv',\n",
    "                       'RecessionYN', 'RevLineCr','MIS_Status','UrbanRural', 'NewExist', 'LowDoc'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "2cc9049c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Saving our now processed data to a new CSV file for future reference\n",
    "SBAdf5.to_csv(r'C:\\Users\\joshu\\DTSC 691 Project\\SBAdf5.csv', header = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9ae36534",
   "metadata": {},
   "outputs": [],
   "source": [
    "#7/1/22 experienced a computer error, restarted from importing saved CSV file\n",
    "SBAdf5 = pd.read_csv('SBAdf5.csv', low_memory=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bda4882e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Term</th>\n",
       "      <th>NoEmp</th>\n",
       "      <th>FranchiseCode</th>\n",
       "      <th>DisbursementGross</th>\n",
       "      <th>GrAppv</th>\n",
       "      <th>SBA_Appv</th>\n",
       "      <th>RecessionYN</th>\n",
       "      <th>RevLineCr</th>\n",
       "      <th>MIS_Status</th>\n",
       "      <th>UrbanRural</th>\n",
       "      <th>NewExist</th>\n",
       "      <th>LowDoc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>-0.339513</td>\n",
       "      <td>-0.100007</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.490730</td>\n",
       "      <td>-0.468423</td>\n",
       "      <td>-0.490730</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>-0.643861</td>\n",
       "      <td>-0.126995</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.560262</td>\n",
       "      <td>-0.539029</td>\n",
       "      <td>-0.560262</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0.877876</td>\n",
       "      <td>-0.059526</td>\n",
       "      <td>0</td>\n",
       "      <td>0.298449</td>\n",
       "      <td>0.332952</td>\n",
       "      <td>0.298449</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>-0.643861</td>\n",
       "      <td>-0.126995</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.577644</td>\n",
       "      <td>-0.556680</td>\n",
       "      <td>-0.577644</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1.638745</td>\n",
       "      <td>0.034931</td>\n",
       "      <td>0</td>\n",
       "      <td>0.096808</td>\n",
       "      <td>0.128195</td>\n",
       "      <td>0.096808</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899159</th>\n",
       "      <td>899159</td>\n",
       "      <td>-0.643861</td>\n",
       "      <td>-0.073020</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.455965</td>\n",
       "      <td>-0.433120</td>\n",
       "      <td>-0.455965</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899160</th>\n",
       "      <td>899160</td>\n",
       "      <td>-0.643861</td>\n",
       "      <td>-0.073020</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.403816</td>\n",
       "      <td>-0.380166</td>\n",
       "      <td>-0.403816</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899161</th>\n",
       "      <td>899161</td>\n",
       "      <td>-0.035166</td>\n",
       "      <td>0.196856</td>\n",
       "      <td>0</td>\n",
       "      <td>0.343644</td>\n",
       "      <td>0.378846</td>\n",
       "      <td>0.343644</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899162</th>\n",
       "      <td>899162</td>\n",
       "      <td>-0.643861</td>\n",
       "      <td>-0.073020</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.438582</td>\n",
       "      <td>-0.415469</td>\n",
       "      <td>-0.438582</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899163</th>\n",
       "      <td>899163</td>\n",
       "      <td>-0.796034</td>\n",
       "      <td>-0.140489</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.595027</td>\n",
       "      <td>-0.574331</td>\n",
       "      <td>-0.595027</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>899164 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Unnamed: 0      Term     NoEmp  FranchiseCode  DisbursementGross  \\\n",
       "0                0 -0.339513 -0.100007              0          -0.490730   \n",
       "1                1 -0.643861 -0.126995              0          -0.560262   \n",
       "2                2  0.877876 -0.059526              0           0.298449   \n",
       "3                3 -0.643861 -0.126995              0          -0.577644   \n",
       "4                4  1.638745  0.034931              0           0.096808   \n",
       "...            ...       ...       ...            ...                ...   \n",
       "899159      899159 -0.643861 -0.073020              0          -0.455965   \n",
       "899160      899160 -0.643861 -0.073020              0          -0.403816   \n",
       "899161      899161 -0.035166  0.196856              0           0.343644   \n",
       "899162      899162 -0.643861 -0.073020              0          -0.438582   \n",
       "899163      899163 -0.796034 -0.140489              0          -0.595027   \n",
       "\n",
       "          GrAppv  SBA_Appv  RecessionYN  RevLineCr  MIS_Status  UrbanRural  \\\n",
       "0      -0.468423 -0.490730            0        0.0           1    1.000000   \n",
       "1      -0.539029 -0.560262            0        0.0           1    1.000000   \n",
       "2       0.332952  0.298449            0        0.0           1    1.000000   \n",
       "3      -0.556680 -0.577644            0        0.0           1    2.000000   \n",
       "4       0.128195  0.096808            0        0.0           1    1.000000   \n",
       "...          ...       ...          ...        ...         ...         ...   \n",
       "899159 -0.433120 -0.455965            0        0.0           1    1.000000   \n",
       "899160 -0.380166 -0.403816            0        1.0           1    1.333333   \n",
       "899161  0.378846  0.343644            0        0.0           1    1.000000   \n",
       "899162 -0.415469 -0.438582            0        0.0           0    2.000000   \n",
       "899163 -0.574331 -0.595027            0        0.0           1    1.000000   \n",
       "\n",
       "        NewExist  LowDoc  \n",
       "0            2.0     1.0  \n",
       "1            2.0     1.0  \n",
       "2            1.0     0.0  \n",
       "3            1.0     1.0  \n",
       "4            1.0     0.0  \n",
       "...          ...     ...  \n",
       "899159       1.0     0.0  \n",
       "899160       1.0     0.0  \n",
       "899161       1.0     0.0  \n",
       "899162       1.0     1.0  \n",
       "899163       2.0     0.0  \n",
       "\n",
       "[899164 rows x 13 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Reviewing out fully cleaned dataframe before moving on\n",
    "SBAdf5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e9221604",
   "metadata": {},
   "outputs": [],
   "source": [
    "SBAdf5 = SBAdf5.drop([\"Unnamed: 0\"], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a95a4b63",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unique values in MIS_Status [1 0 2]\n"
     ]
    }
   ],
   "source": [
    "#Reviewing our feature data to ensure we have only a 1 for 'PIF' or a 0 for 'Chgoff'\n",
    "UniqueFeature = pd.unique(SBAdf5.MIS_Status)\n",
    "print(f\"Unique values in MIS_Status {UniqueFeature}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "80f84fd7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    739609\n",
      "0    157558\n",
      "2      1997\n",
      "Name: MIS_Status, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(SBAdf5['MIS_Status'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2eddd846",
   "metadata": {},
   "outputs": [],
   "source": [
    "#With plenty of instances left, we will drop the rows containing a 2\n",
    "SBAdf5 = SBAdf5[SBAdf5.MIS_Status != 2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2a077d64",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    739609\n",
      "0    157558\n",
      "Name: MIS_Status, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(SBAdf5['MIS_Status'].value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a27a9782",
   "metadata": {},
   "source": [
    "# Train Test Split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d3f8cb6b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Train test split our data for our 6 models we will test below\n",
    "#X is our features data\n",
    "X = SBAdf5.drop([\"MIS_Status\"], axis=1)\n",
    "#Y is our response data\n",
    "Y = SBAdf5[\"MIS_Status\"]\n",
    "\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.1, random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f8e6095",
   "metadata": {},
   "source": [
    "# Random Forest Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "76cab4ca",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 48 candidates, totalling 144 fits\n",
      "The best parameters are:  {'max_depth': 8, 'min_samples_split': 4, 'n_estimators': 250}\n"
     ]
    }
   ],
   "source": [
    "# -----\n",
    "# Coarse-Grained RandomForestClassifier GridSearch\n",
    "# -----\n",
    "\n",
    "#Took code and language from my assignment 3 submission for DTSC680\n",
    "#create our paramater grid dictionary to be passed to the grid search\n",
    "param_grid = [\n",
    "    {\"max_depth\": [3,4,5,8], \"n_estimators\": [50,100,250],\n",
    "    \"min_samples_split\": [4,5,8,12]},\n",
    "]\n",
    " \n",
    "#Initiate grid search CV, passing it our parameter grid dictionary\n",
    "rfc_gs_coarse = GridSearchCV(RandomForestClassifier(random_state=42), param_grid,\n",
    "                              verbose=1, cv=3, n_jobs=-1)\n",
    "\n",
    "#Fit our grid search with our training data\n",
    "rfc_gs_coarse.fit(X_train, Y_train)\n",
    "\n",
    "#Find the best parameters from our given dictionary options we passed the grid search\n",
    "print(\"The best parameters are: \", (rfc_gs_coarse.best_params_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "fd276337",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 60 candidates, totalling 180 fits\n",
      "The best parameters are:  {'max_depth': 30, 'min_samples_split': 4, 'n_estimators': 300}\n"
     ]
    }
   ],
   "source": [
    "# -----\n",
    "# Refined-Grained RandomForestClassifier GridSearch\n",
    "# -----\n",
    "\n",
    "#Took code and language from my assignment 3 submission for DTSC680\n",
    "#create our paramater grid dictionary to be passed to the grid search\n",
    "param_grid = [\n",
    "    {\"max_depth\": [30,32,34,36], \"n_estimators\": [250,275,300,325,350],\n",
    "    \"min_samples_split\": [2,3,4]},\n",
    "]\n",
    " \n",
    "#Initiate grid search CV, passing it our parameter grid dictionary\n",
    "rfc_gs_refined = GridSearchCV(RandomForestClassifier(random_state=42), param_grid,\n",
    "                              verbose=1, cv=3, n_jobs = -1)\n",
    "\n",
    "#Fit our grid search with our training data\n",
    "rfc_gs_refined.fit(X_train, Y_train)\n",
    "\n",
    "#Find the best parameters from our given dictionary options we passed the grid search\n",
    "print(\"The best parameters are: \", (rfc_gs_refined.best_params_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "98e176c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 25 candidates, totalling 75 fits\n",
      "The best parameters are:  {'max_depth': 25, 'min_samples_split': 4, 'n_estimators': 299}\n"
     ]
    }
   ],
   "source": [
    "# -----\n",
    "# Final-Grained RandomForestClassifier GridSearch\n",
    "# -----\n",
    "\n",
    "#Took code and language from my assignment 3 submission for DTSC680\n",
    "#create our paramater grid dictionary to be passed to the grid search\n",
    "param_grid = [\n",
    "    {\"max_depth\": [10,15,20,25,30], \"n_estimators\": [294,296,298,299,300],\n",
    "    \"min_samples_split\": [4]},\n",
    "]\n",
    " \n",
    "#Initiate grid search CV, passing it our parameter grid dictionary\n",
    "rfc_gs_final = GridSearchCV(RandomForestClassifier(random_state=42), param_grid,\n",
    "                              verbose=1, cv=3, n_jobs = -1)\n",
    "\n",
    "#Fit our grid search with our training data\n",
    "rfc_gs_final.fit(X_train, Y_train)\n",
    "\n",
    "#Find the best parameters from our given dictionary options we passed the grid search\n",
    "print(\"The best parameters are: \", (rfc_gs_final.best_params_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "14b9055a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 5 candidates, totalling 15 fits\n",
      "The best parameters are:  {'max_depth': 25, 'min_samples_split': 4, 'n_estimators': 299}\n"
     ]
    }
   ],
   "source": [
    "# -----\n",
    "# Final2-Grained RandomForestClassifier GridSearch\n",
    "# -----\n",
    "\n",
    "#Took code and language from my assignment 3 submission for DTSC680\n",
    "#create our paramater grid dictionary to be passed to the grid search\n",
    "param_grid = [\n",
    "    {\"max_depth\": [23,24,25,26,27], \"n_estimators\": [299],\n",
    "    \"min_samples_split\": [4]},\n",
    "]\n",
    " \n",
    "#Initiate grid search CV, passing it our parameter grid dictionary\n",
    "rfc_gs_final2 = GridSearchCV(RandomForestClassifier(random_state=42), param_grid,\n",
    "                              verbose=1, cv=3, n_jobs = -1)\n",
    "\n",
    "#Fit our grid search with our training data\n",
    "rfc_gs_final2.fit(X_train, Y_train)\n",
    "\n",
    "#Find the best parameters from our given dictionary options we passed the grid search\n",
    "print(\"The best parameters are: \", (rfc_gs_final.best_params_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f7c13c55",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 2min 58s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "#Train our RandomForestClassifier with the best paramaters found from our grid search and evaluate the time it takes to train\n",
    "#Creating a new RandomForestClassifier\n",
    "\n",
    "rfc = RandomForestClassifier(n_estimators=299, max_depth=25, random_state=42, min_samples_split=4)\n",
    "rfc.fit(X_train, Y_train)\n",
    "#running our model prediction using our X_train data\n",
    "rfcpred = rfc.predict(X_train)\n",
    "y_predrfc = rfc.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "11cc94a7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest Classifier Accuracy=0.9222220983760046\n",
      "Random Forest Classifier Precision=0.9222220983760046\n",
      "Random Forest Classifier Recall=0.9222220983760046\n"
     ]
    }
   ],
   "source": [
    "#Evaluating the accuracy, precision, and recall of our model\n",
    "acc_scorerfc = accuracy_score(Y_test, y_predrfc)\n",
    "prec_scorerfc = precision_score(Y_test, y_predrfc, average='micro')\n",
    "recall_scorerfc = recall_score(Y_test, y_predrfc, average='micro')\n",
    "\n",
    "print('Random Forest Classifier Accuracy=%s' % (acc_scorerfc))\n",
    "print('Random Forest Classifier Precision=%s' % (prec_scorerfc))\n",
    "print('Random Forest Classifier Recall=%s' % (recall_scorerfc))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "1124e57b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Confusion Matrix for our Random Forest Classifier\n",
    "\n",
    "plot_confusion_matrix(rfc, X_test, Y_test)  \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "68ad8b4f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Examing feature importance of our Random Forest Classifier\n",
    "#Some code taken from: https://scikit-learn.org/stable/auto_examples/ensemble/plot_forest_importances.html\n",
    "\n",
    "#Defining our feature names\n",
    "feature_names = (['Term', 'NoEmp', 'FranchiseCode', 'DisbursementGross', 'GrAppv', 'SBA_Appv',\n",
    "                       'RecessionYN', 'RevLineCr','UrbanRural', 'NewExist', 'LowDoc'])\n",
    "\n",
    "#Gathering our importances\n",
    "importances = rfc.feature_importances_\n",
    "std = np.std([tree.feature_importances_ for tree in rfc.estimators_], axis=0)\n",
    "\n",
    "forest_importances = pd.Series(importances, index=feature_names)\n",
    "\n",
    "#Plotting our feature importance\n",
    "fig, ax = plt.subplots()\n",
    "forest_importances.plot.bar(yerr=std, ax=ax)\n",
    "ax.set_title(\"Feature importances using MDI\")\n",
    "ax.set_ylabel(\"Mean decrease in impurity\")\n",
    "fig.tight_layout()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27b28d2c",
   "metadata": {},
   "source": [
    "# Decision Tree Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "dfc3096c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 128 candidates, totalling 384 fits\n",
      "The best parameters are:  {'max_depth': 16, 'min_samples_split': 20, 'splitter': 'best'}\n"
     ]
    }
   ],
   "source": [
    "# -----\n",
    "# Coarse-Grained DecisionTreeClassifier GridSearch\n",
    "# -----\n",
    "\n",
    "#Took code and language from my assignment 2 submission for DTSC680\n",
    "#create our paramater grid dictionary to be passed to the grid search\n",
    "param_grid = [\n",
    "    {\"splitter\": [\"best\", \"random\"], \"max_depth\": [1,2,3,4,5,8,16,32],\n",
    "    \"min_samples_split\": [2,3,4,5,8,12,16,20]},\n",
    "]\n",
    " \n",
    "#Initiate grid search CV, passing it our parameter grid dictionary\n",
    "dtc_gs_coarse = GridSearchCV(DecisionTreeClassifier(random_state=42), param_grid,\n",
    "                              verbose=1, cv=3, n_jobs = -1)\n",
    "\n",
    "#Fit our grid search with our training data\n",
    "dtc_gs_coarse.fit(X_train, Y_train)\n",
    "\n",
    "#Find the best parameters from our given dictionary options we passed the grid search\n",
    "print(\"The best parameters are: \", (dtc_gs_coarse.best_params_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "babd4b5c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 42 candidates, totalling 126 fits\n",
      "The best parameters are:  {'max_depth': 13, 'min_samples_split': 70, 'splitter': 'best'}\n"
     ]
    }
   ],
   "source": [
    "# -----\n",
    "# Refined-Grained DecisionTreeClassifier GridSearch\n",
    "# -----\n",
    "\n",
    "#Took code and language from my assignment 1 submission for DTSC680\n",
    "#create our paramater grid dictionary to be passed to the grid search\n",
    "param_grid = [\n",
    "    {\"splitter\": [\"best\"], \"max_depth\": [13,14,15,16,17,18],\n",
    "    \"min_samples_split\": [69,70,71,72,73,74,75]},\n",
    "]\n",
    " \n",
    "#Initiate grid search CV, passing it our parameter grid dictionary\n",
    "dtc_gs_refined = GridSearchCV(DecisionTreeClassifier(random_state=42), param_grid,\n",
    "                              verbose=1, cv=3)\n",
    "\n",
    "#Fit our grid search with our training data\n",
    "dtc_gs_refined.fit(X_train, Y_train)\n",
    "\n",
    "#Find the best parameters from our given dictionary options we passed the grid search\n",
    "print(\"The best parameters are: \", (dtc_gs_refined.best_params_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "2dd040f6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 7 candidates, totalling 21 fits\n",
      "The best parameters are:  {'max_depth': 13, 'min_samples_split': 70, 'splitter': 'best'}\n"
     ]
    }
   ],
   "source": [
    "# -----\n",
    "# Final-Grained DecisionTreeClassifier GridSearch\n",
    "# -----\n",
    "\n",
    "#Took code and language from my assignment 1 submission for DTSC680\n",
    "#create our paramater grid dictionary to be passed to the grid search\n",
    "param_grid = [\n",
    "    {\"splitter\": [\"best\"], \"max_depth\": [9,10,11,12,13,14,15],\n",
    "    \"min_samples_split\": [70]},\n",
    "]\n",
    " \n",
    "#Initiate grid search CV, passing it our parameter grid dictionary\n",
    "dtc_gs_final = GridSearchCV(DecisionTreeClassifier(random_state=42), param_grid,\n",
    "                              verbose=1, cv=3)\n",
    "\n",
    "#Fit our grid search with our training data\n",
    "dtc_gs_final.fit(X_train, Y_train)\n",
    "\n",
    "#Find the best parameters from our given dictionary options we passed the grid search\n",
    "print(\"The best parameters are: \", (dtc_gs_final.best_params_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "58a1dca1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 4.76 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "#Train our DecisionTreeClassifier with the best paramaters found from our grid search and evaluate the time it takes to train\n",
    "\n",
    "#Creating a new DecisionTreeClassifier\n",
    "dtc = DecisionTreeClassifier(max_depth=13, min_samples_split=70, splitter='best', random_state=42)\n",
    "dtc.fit(X_train, Y_train)\n",
    "#running our model prediction using our X_train data\n",
    "dtcpred = dtc.predict(X_train)\n",
    "y_preddtc = dtc.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "5dc68ab2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Decision Tree Classifier Accuracy=0.9292441789181537\n",
      "Decision Tree Classifier Precision=0.9292441789181537\n",
      "Decision Tree Classifier Recall=0.9292441789181537\n"
     ]
    }
   ],
   "source": [
    "#Evaluating the accuracy, precision, and recall of our model\n",
    "acc_scoredtc = accuracy_score(Y_test, y_preddtc)\n",
    "prec_scoredtc = precision_score(Y_test, y_preddtc, average='micro')\n",
    "recall_scoredtc = recall_score(Y_test, y_preddtc, average='micro')\n",
    "\n",
    "print('Decision Tree Classifier Accuracy=%s' % (acc_scoredtc))\n",
    "print('Decision Tree Classifier Precision=%s' % (prec_scoredtc))\n",
    "print('Decision Tree Classifier Recall=%s' % (recall_scoredtc))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "82a2d85c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Confusion Matrix for our Decision Tree Classifier\n",
    "plot_confusion_matrix(dtc, X_test, Y_test)  \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49256dcd",
   "metadata": {},
   "source": [
    "# Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "c65159c6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 1.31 s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\joshu\\anaconda3\\lib\\site-packages\\daal4py\\sklearn\\linear_model\\logistic_path.py:548: ConvergenceWarning: lbfgs failed to converge (status=2):\n",
      "ABNORMAL_TERMINATION_IN_LNSRCH.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "#Train our Logistic Regression model and evaluate how long it takes to train\n",
    "\n",
    "lr = LogisticRegression()\n",
    "lr.fit(X_train, Y_train)\n",
    "y_predlr = lr.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "811b11b8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression Accuracy=0.8262536642999655\n",
      "Logistic Regression Precision=0.8262536642999655\n",
      "Logistic Regression Recall=0.8262536642999655\n"
     ]
    }
   ],
   "source": [
    "#Evaluating the accuracy, precision, and recall of our model\n",
    "acc_scorelr = accuracy_score(Y_test, y_predlr)\n",
    "prec_scorelr = precision_score(Y_test, y_predlr, average='micro')\n",
    "recall_scorelr = recall_score(Y_test, y_predlr, average='micro')\n",
    "\n",
    "print('Logistic Regression Accuracy=%s' % (acc_scorelr))\n",
    "print('Logistic Regression Precision=%s' % (prec_scorelr))\n",
    "print('Logistic Regression Recall=%s' % (recall_scorelr))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "1a9c6f27",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Confusion Matrix for our Logistic Regression\n",
    "plot_confusion_matrix(lr, X_test, Y_test)  \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38812b56",
   "metadata": {},
   "source": [
    "# KNN Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6f28f2e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Perform gridsearch to identify the best paramater for our KNN Classifier\n",
    "knn = KNeighborsClassifier()\n",
    "k_range = list(range(1, 100))\n",
    "param_grid = dict(n_neighbors=k_range)\n",
    "  \n",
    "# defining parameter range\n",
    "grid = GridSearchCV(knn, param_grid, cv=3, scoring='accuracy', return_train_score=False,\n",
    "                    verbose=1)\n",
    "  \n",
    "# fitting the model for grid search\n",
    "grid_search=grid.fit(X_train, Y_train)\n",
    "print(\"The best parameters are: \", (grid.best_params_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "455b6ff0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 22.5 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "#Train our KNN Classifier and evaluate how long it takes to train\n",
    "\n",
    "knn = KNeighborsClassifier(n_neighbors=7)\n",
    "knn.fit(X_train, Y_train)\n",
    "y_predknn = knn.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "19830126",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KNN Classifier Accuracy=0.9078769909827569\n",
      "KNN Classifier Precision=0.9078769909827569\n",
      "KNN Classifier Recall=0.9078769909827569\n"
     ]
    }
   ],
   "source": [
    "#Evaluating the accuracy, precision, and recall of our model\n",
    "acc_scoreknn = accuracy_score(Y_test, y_predknn)\n",
    "prec_scoreknn = precision_score(Y_test, y_predknn, average='micro')\n",
    "recall_scoreknn = recall_score(Y_test, y_predknn, average='micro')\n",
    "\n",
    "print('KNN Classifier Accuracy=%s' % (acc_scoreknn))\n",
    "print('KNN Classifier Precision=%s' % (prec_scoreknn))\n",
    "print('KNN Classifier Recall=%s' % (recall_scoreknn))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "7d717e6c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Confusion Matrix for our KNN Classifier\n",
    "plot_confusion_matrix(knn, X_test, Y_test)  \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3be81b2c",
   "metadata": {},
   "source": [
    "# SVM Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "da3cae59",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Train test split our data for our SVM model we will test below\n",
    "#X is our features data\n",
    "X = SBAdf5.drop([\"MIS_Status\"], axis=1)\n",
    "#Y is our response data\n",
    "Y = SBAdf5[\"MIS_Status\"]\n",
    "\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.025, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "9be256d5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 4h 29min 59s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "#Train our SVM classifier and evaluate how long it takes to train\n",
    "\n",
    "svm = SVC(kernel= 'linear', C=0.01)\n",
    "svm.fit(X_train, Y_train)\n",
    "y_predsvm = svm.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "c682382b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM Classifier Accuracy=0.8239857333927775\n",
      "SVM Classifier Precision=0.8239857333927775\n",
      "SVM Classifier Recall=0.8239857333927775\n"
     ]
    }
   ],
   "source": [
    "#Evaluating the accuracy, precision, and recall of our model\n",
    "acc_scoreSVM = accuracy_score(Y_test, y_predsvm)\n",
    "prec_scoreSVM = precision_score(Y_test, y_predsvm, average='micro')\n",
    "recall_scoreSVM = recall_score(Y_test, y_predsvm, average='micro')\n",
    "\n",
    "print('SVM Classifier Accuracy=%s' % (acc_scoreSVM))\n",
    "print('SVM Classifier Precision=%s' % (prec_scoreSVM))\n",
    "print('SVM Classifier Recall=%s' % (recall_scoreSVM))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "a93e93ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Confusion Matrix for our SVM Classifier\n",
    "plot_confusion_matrix(svm, X_test, Y_test)  \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e42ce52",
   "metadata": {},
   "source": [
    "# ANN Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "e515814a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Train test split our data back to 10% for our ANN Classifier\n",
    "#X is our features data\n",
    "X = SBAdf5.drop([\"MIS_Status\"], axis=1)\n",
    "#Y is our response data\n",
    "Y = SBAdf5[\"MIS_Status\"]\n",
    "\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.1, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "0008fcad",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating our early stopping object\n",
    "early_stop = EarlyStopping()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "8c676858",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5000\n",
      "25233/25233 [==============================] - 28s 1ms/step - loss: 0.1111 - accuracy: 0.8409 - val_loss: 0.1046 - val_accuracy: 0.8483\n",
      "Epoch 2/5000\n",
      "25233/25233 [==============================] - 28s 1ms/step - loss: 0.1031 - accuracy: 0.8539 - val_loss: 0.1013 - val_accuracy: 0.8554\n",
      "Epoch 3/5000\n",
      "25233/25233 [==============================] - 32s 1ms/step - loss: 0.1007 - accuracy: 0.8591 - val_loss: 0.0996 - val_accuracy: 0.8611\n",
      "Epoch 4/5000\n",
      "25233/25233 [==============================] - 29s 1ms/step - loss: 0.0995 - accuracy: 0.8611 - val_loss: 0.1001 - val_accuracy: 0.861895 - accuracy: 0.\n",
      "Epoch 5/5000\n",
      "25233/25233 [==============================] - 31s 1ms/step - loss: 0.0988 - accuracy: 0.8622 - val_loss: 0.1002 - val_accuracy: 0.8594\n",
      "Epoch 6/5000\n",
      "25233/25233 [==============================] - 38s 2ms/step - loss: 0.0984 - accuracy: 0.8626 - val_loss: 0.0977 - val_accuracy: 0.8630\n",
      "Epoch 7/5000\n",
      "25233/25233 [==============================] - 38s 2ms/step - loss: 0.0978 - accuracy: 0.8629 - val_loss: 0.0976 - val_accuracy: 0.8623\n",
      "Epoch 8/5000\n",
      "25233/25233 [==============================] - 38s 2ms/step - loss: 0.0975 - accuracy: 0.8633 - val_loss: 0.0970 - val_accuracy: 0.8627\n",
      "Epoch 9/5000\n",
      "25233/25233 [==============================] - 38s 2ms/step - loss: 0.0972 - accuracy: 0.8636 - val_loss: 0.0967 - val_accuracy: 0.8634\n",
      "Epoch 10/5000\n",
      "25233/25233 [==============================] - 43s 2ms/step - loss: 0.0969 - accuracy: 0.8637 - val_loss: 0.0966 - val_accuracy: 0.8629\n",
      "Epoch 11/5000\n",
      "25233/25233 [==============================] - 34s 1ms/step - loss: 0.0966 - accuracy: 0.8637 - val_loss: 0.0967 - val_accuracy: 0.8654\n",
      "Epoch 12/5000\n",
      "25233/25233 [==============================] - 41s 2ms/step - loss: 0.0964 - accuracy: 0.8643 - val_loss: 0.0956 - val_accuracy: 0.8648\n",
      "Epoch 13/5000\n",
      "25233/25233 [==============================] - 47s 2ms/step - loss: 0.0968 - accuracy: 0.8641 - val_loss: 0.0954 - val_accuracy: 0.8646\n",
      "Wall time: 7min 47s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "#Train our ANN classifier and evaluate how long it takes to train\n",
    "\n",
    "tf.keras.backend.set_floatx('float64')\n",
    "\n",
    "ann = keras.models.Sequential([ \n",
    "            keras.layers.Dense(100, activation=\"relu\"),      \n",
    "            keras.layers.Dense(50),\n",
    "            keras.layers.Dense(10), \n",
    "            keras.layers.Dense(1)\n",
    "])\n",
    "\n",
    "#Compiling our model\n",
    "ann.compile(loss=\"mean_squared_error\", \n",
    "              optimizer=\"sgd\", \n",
    "              metrics=[\"accuracy\"])\n",
    "\n",
    "\n",
    "#Fitting our model\n",
    "callback = tf.keras.callbacks.EarlyStopping(monitor=\"loss\", patience=0)\n",
    "ann_fit = ann.fit(X_train, Y_train, epochs=5000, callbacks=[callback], \n",
    "                  validation_data=(X_test, Y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "ed64766e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Making\n",
    "y_pred = ann.predict(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "76bb233a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Artifical Neural Network MSE is:  0.0951\n"
     ]
    }
   ],
   "source": [
    "#calculating our MSE for our ANN model prediction above\n",
    "ANN_mse = mean_squared_error(Y_train, y_pred)\n",
    "\n",
    "#Printing our MSE results\n",
    "print(\"Artifical Neural Network MSE is: \", round((ANN_mse),4))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "92196159",
   "metadata": {},
   "source": [
    "# Summary of Our 6 Models Performance "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "48743a7e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest Classifier Accuracy=0.9222220983760046\n",
      "Random Forest Classifier Precision=0.9222220983760046\n",
      "Random Forest Classifier Recall=0.9222220983760046\n",
      "The Training Time for This Classifier Was: 2min 58sec\n",
      "Decision Tree Classifier Accuracy=0.9292441789181537\n",
      "Decision Tree Classifier Precision=0.9292441789181537\n",
      "Decision Tree Classifier Recall=0.9292441789181537\n",
      "The Training Time for This Classifier Was: 4.76sec\n",
      "Logistic Regression Accuracy=0.8262536642999655\n",
      "Logistic Regression Precision=0.8262536642999655\n",
      "Logistic Regression Recall=0.8262536642999655\n",
      "The Training Time for This Classifier Was: 1.31sec\n",
      "KNN Classifier Accuracy=0.9078769909827569\n",
      "KNN Classifier Precision=0.9078769909827569\n",
      "KNN Classifier Recall=0.9078769909827569\n",
      "The Training Time for This Classifier Was: 22.5sec\n",
      "SVM Classifier Accuracy=0.8239857333927775\n",
      "SVM Classifier Precision=0.8239857333927775\n",
      "SVM Classifier Recall=0.8239857333927775\n",
      "The Training Time for This Classifier Was:4h 29min 59s\n",
      "Artifical Neural Network MSE is:  0.0951\n",
      "The Training Time for This Classifier Was:7min 47s\n"
     ]
    }
   ],
   "source": [
    "#Random Forest Classifier Performance\n",
    "print('Random Forest Classifier Accuracy=%s' % (acc_scorerfc))\n",
    "print('Random Forest Classifier Precision=%s' % (prec_scorerfc))\n",
    "print('Random Forest Classifier Recall=%s' % (recall_scorerfc))\n",
    "print('The Training Time for This Classifier Was: 2min 58sec')\n",
    "\n",
    "#Decision Tree Classifier Performance\n",
    "print('Decision Tree Classifier Accuracy=%s' % (acc_scoredtc))\n",
    "print('Decision Tree Classifier Precision=%s' % (prec_scoredtc))\n",
    "print('Decision Tree Classifier Recall=%s' % (recall_scoredtc))\n",
    "print('The Training Time for This Classifier Was: 4.76sec')\n",
    "\n",
    "#Linear Regression Performance\n",
    "print('Logistic Regression Accuracy=%s' % (acc_scorelr))\n",
    "print('Logistic Regression Precision=%s' % (prec_scorelr))\n",
    "print('Logistic Regression Recall=%s' % (recall_scorelr))\n",
    "print('The Training Time for This Classifier Was: 1.31sec')\n",
    "\n",
    "#KNN Classifier Performance\n",
    "print('KNN Classifier Accuracy=%s' % (acc_scoreknn))\n",
    "print('KNN Classifier Precision=%s' % (prec_scoreknn))\n",
    "print('KNN Classifier Recall=%s' % (recall_scoreknn))\n",
    "print('The Training Time for This Classifier Was: 22.5sec')\n",
    "\n",
    "#SVM Classifier Performance\n",
    "print('SVM Classifier Accuracy=%s' % (acc_scoreSVM))\n",
    "print('SVM Classifier Precision=%s' % (prec_scoreSVM))\n",
    "print('SVM Classifier Recall=%s' % (recall_scoreSVM))\n",
    "print('The Training Time for This Classifier Was:4h 29min 59s')\n",
    "\n",
    "#Ann Classifier Perfomance\n",
    "print(\"Artifical Neural Network MSE is: \", round((ANN_mse),4))\n",
    "print('The Training Time for This Classifier Was:7min 47s')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fad33dc7",
   "metadata": {},
   "source": [
    "Based on the above scores, I have chosen the Decision Tree Classifier as our model of choice."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3014535b",
   "metadata": {},
   "source": [
    "# Using Pickle on Selected Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "66f2c369",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Selecting our model\n",
    "model = dtc\n",
    "\n",
    "#saving to our pickle file\n",
    "pickle.dump(model, open('model.pkl', 'wb'))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
